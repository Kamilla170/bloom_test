"""
Plant Memory Manager - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–π
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å AI –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞—Å—Ç–µ–Ω–∏—é
–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ timezone, JSON –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
"""

import logging
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pytz

logger = logging.getLogger(__name__)

# Timezone –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
UTC_TZ = pytz.UTC

class PlantMemoryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    
    def __init__(self):
        self.context_cache = {}  # –ö—ç—à –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –ø–∞–º—è—Ç–∏
    
    async def build_full_context(self, plant_id: int, user_id: int, 
                                include_analyses: int = 5,
                                include_qa: int = 10,
                                include_problems: bool = True) -> Dict:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ —Å expiration
            cache_key = f"{user_id}_{plant_id}"
            if cache_key in self.context_cache:
                cached = self.context_cache[cache_key]
                cache_age = (datetime.now() - cached["timestamp"]).seconds
                
                if cache_age < 300:  # 5 –º–∏–Ω—É—Ç
                    logger.info(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è {plant_id}")
                    return cached["context"]
            
            from database import get_db
            
            db = await get_db()
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏
            plant_info = await db.get_plant_with_state(plant_id, user_id)
            if not plant_info:
                logger.warning(f"–†–∞—Å—Ç–µ–Ω–∏–µ {plant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return {}
            
            context = {
                "plant_id": plant_id,
                "plant_name": plant_info.get('display_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ'),
                "species": plant_info.get('plant_name'),
                "added_date": plant_info.get('saved_date'),
                "current_state": plant_info.get('current_state', 'healthy'),
                "state_changed_date": plant_info.get('state_changed_date'),
                "growth_stage": plant_info.get('growth_stage', 'young'),
                "days_in_collection": 0,
                
                # –ò—Å—Ç–æ—Ä–∏—è —É—Ö–æ–¥–∞
                "watering_info": {
                    "last_watered": plant_info.get('last_watered'),
                    "watering_count": plant_info.get('watering_count', 0),
                    "watering_interval": plant_info.get('watering_interval', 5),
                    "total_waterings": plant_info.get('watering_count', 0)
                },
                
                # –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤
                "analyses_history": [],
                
                # –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
                "state_history": [],
                
                # –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
                "qa_history": [],
                
                # –ü—Ä–æ–±–ª–µ–º—ã
                "problems": {
                    "current": [],
                    "resolved": [],
                    "recurring": []
                },
                
                # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                "user_patterns": [],
                
                # –£—Å–ª–æ–≤–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
                "environment": {}
            }
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–Ω–µ–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            if plant_info.get('saved_date'):
                try:
                    saved_date = plant_info['saved_date']
                    if saved_date.tzinfo is not None:
                        saved_date = saved_date.replace(tzinfo=None)
                    context["days_in_collection"] = (datetime.now() - saved_date).days
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–Ω–µ–π: {e}")
                    context["days_in_collection"] = 0
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤
            if include_analyses > 0:
                try:
                    analyses = await db.get_plant_analyses_history(plant_id, limit=include_analyses)
                    context["analyses_history"] = self._format_analyses(analyses)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤: {e}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π
            try:
                state_history = await db.get_plant_state_history(plant_id, limit=20)
                context["state_history"] = self._format_state_history(state_history)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Q&A –∏—Å—Ç–æ—Ä–∏—é
            if include_qa > 0:
                try:
                    qa_history = await db.get_plant_qa_history(plant_id, limit=include_qa)
                    context["qa_history"] = self._format_qa_history(qa_history)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Q&A: {e}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            if include_problems:
                try:
                    all_problems = await db.get_plant_problems_history(plant_id, limit=20)
                    unresolved = await db.get_unresolved_problems(plant_id)
                    
                    context["problems"]["current"] = [dict(p) for p in unresolved]
                    context["problems"]["resolved"] = [
                        dict(p) for p in all_problems if p.get('resolved')
                    ]
                    context["problems"]["recurring"] = self._find_recurring_problems(all_problems)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–±–ª–µ–º: {e}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                patterns = await db.get_user_patterns(plant_id)
                context["user_patterns"] = self._format_patterns(patterns)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª–æ–≤–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            try:
                environment = await db.get_plant_environment(plant_id)
                if environment:
                    context["environment"] = dict(environment)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª–æ–≤–∏–π: {e}")
            
            # –ö—ç—à–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.context_cache[cache_key] = {
                "context": context,
                "timestamp": datetime.now()
            }
            
            logger.info(f"‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è {plant_id}")
            return context
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
            return {}
    
    def _format_analyses(self, analyses: List[Dict]) -> List[Dict]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤"""
        formatted = []
        for analysis in analyses:
            try:
                formatted.append({
                    "date": analysis.get('analysis_date'),
                    "confidence": analysis.get('confidence', 0),
                    "detected_state": analysis.get('detected_state'),
                    "problems": analysis.get('detected_problems'),
                    "summary": self._summarize_analysis(analysis.get('full_analysis', ''))
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
                continue
        return formatted
    
    def _format_state_history(self, history: List[Dict]) -> List[Dict]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        formatted = []
        for entry in history:
            try:
                formatted.append({
                    "date": entry.get('change_date'),
                    "from": entry.get('previous_state'),
                    "to": entry.get('new_state', 'unknown'),
                    "reason": entry.get('change_reason'),
                    "adjustments": {
                        "watering": entry.get('watering_adjustment', 0),
                        "feeding": entry.get('feeding_adjustment')
                    }
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                continue
        return formatted
    
    def _format_qa_history(self, qa_list: List[Dict]) -> List[Dict]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é Q&A"""
        formatted = []
        for qa in qa_list:
            try:
                formatted.append({
                    "date": qa.get('question_date'),
                    "question": qa.get('question_text', ''),
                    "answer_summary": self._summarize_text(qa.get('answer_text', ''), max_length=150),
                    "feedback": qa.get('user_feedback'),
                    "action_taken": qa.get('follow_up_action'),
                    "resolved": qa.get('problem_resolved', False)
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Q&A: {e}")
                continue
        return formatted
    
    def _format_patterns(self, patterns: List[Dict]) -> List[Dict]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        formatted = []
        for pattern in patterns:
            try:
                pattern_data = pattern.get('pattern_data')
                
                if isinstance(pattern_data, str):
                    try:
                        pattern_data = json.loads(pattern_data)
                    except json.JSONDecodeError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {e}")
                        pattern_data = {"raw": pattern_data}
                
                if pattern_data is None:
                    pattern_data = {}
                
                formatted.append({
                    "type": pattern.get('pattern_type', 'unknown'),
                    "data": pattern_data,
                    "confidence": pattern.get('confidence', 0.0),
                    "occurrences": pattern.get('occurrences', 0)
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {e}")
                continue
        return formatted
    
    def _find_recurring_problems(self, problems: List[Dict]) -> List[Dict]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
        try:
            problem_counts = {}
            for problem in problems:
                ptype = problem.get('problem_type')
                if not ptype:
                    continue
                    
                if ptype not in problem_counts:
                    problem_counts[ptype] = []
                problem_counts[ptype].append(problem)
            
            recurring = []
            for ptype, occurrences in problem_counts.items():
                if len(occurrences) >= 2:
                    dates = []
                    for p in occurrences:
                        problem_date = p.get('problem_date')
                        if problem_date:
                            dates.append(problem_date)
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–µ—Ä–≤—ã–º)
                    dates.sort(reverse=True)
                    
                    recurring.append({
                        "problem_type": ptype,
                        "occurrences": len(occurrences),
                        "dates": dates,
                        "last_occurrence": dates[0] if dates else None
                    })
            
            return recurring
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º: {e}")
            return []
    
    def _summarize_analysis(self, full_text: str, max_length: int = 200) -> str:
        """–°–æ–∫—Ä–∞—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–æ —Ä–µ–∑—é–º–µ"""
        if not full_text:
            return ""
        
        if len(full_text) <= max_length:
            return full_text
        
        lines = full_text.split('\n')
        summary = []
        for line in lines[:10]:
            if line.startswith(("–†–ê–°–¢–ï–ù–ò–ï:", "–°–û–°–¢–û–Ø–ù–ò–ï:", "–¢–ï–ö–£–©–ï–ï_–°–û–°–¢–û–Ø–ù–ò–ï:")):
                summary.append(line)
        
        return '\n'.join(summary) if summary else full_text[:max_length]
    
    def _summarize_text(self, text: str, max_length: int = 150) -> str:
        """–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç"""
        if not text:
            return ""
        
        if len(text) <= max_length:
            return text
        return text[:max_length] + "..."
    
    def _safe_utc_to_moscow(self, utc_datetime):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è UTC –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
        try:
            if not isinstance(utc_datetime, datetime):
                return None
            
            if utc_datetime.tzinfo is None:
                utc_datetime = UTC_TZ.localize(utc_datetime)
            
            return utc_datetime.astimezone(MOSCOW_TZ)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ datetime: {e}")
            return None
    
    async def format_context_for_ai(self, plant_id: int, user_id: int,
                                   focus: str = "general") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ AI"""
        try:
            context = await self.build_full_context(plant_id, user_id)
            
            if not context:
                return ""
            
            if focus == "general":
                return self._format_general_context(context)
            elif focus == "problem":
                return self._format_problem_context(context)
            elif focus == "care":
                return self._format_care_context(context)
            else:
                return self._format_general_context(context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI: {e}")
            return ""
    
    def _format_general_context(self, context: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        try:
            lines = []
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            lines.append(f"–†–ê–°–¢–ï–ù–ò–ï: {context.get('plant_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ')} ({context.get('species', 'N/A')})")
            lines.append(f"–í –ö–û–õ–õ–ï–ö–¶–ò–ò: {context.get('days_in_collection', 0)} –¥–Ω–µ–π")
            lines.append(f"–¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï: {context.get('current_state', 'unknown')}")
            lines.append(f"–≠–¢–ê–ü –†–û–°–¢–ê: {context.get('growth_stage', 'unknown')}")
            lines.append("")
            
            # –ü–æ–ª–∏–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å datetime)
            watering = context.get('watering_info', {})
            last_watered = watering.get('last_watered')
            if last_watered:
                try:
                    last_watered_moscow = self._safe_utc_to_moscow(last_watered)
                    
                    if last_watered_moscow:
                        moscow_now = datetime.now(MOSCOW_TZ)
                        days_ago = (moscow_now.date() - last_watered_moscow.date()).days
                        lines.append(f"–ü–û–õ–ò–í: –ø–æ—Å–ª–µ–¥–Ω–∏–π {days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥, –∏–Ω—Ç–µ—Ä–≤–∞–ª {watering.get('watering_interval', 5)} –¥–Ω–µ–π")
                    else:
                        lines.append(f"–ü–û–õ–ò–í: –∏–Ω—Ç–µ—Ä–≤–∞–ª {watering.get('watering_interval', 5)} –¥–Ω–µ–π")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ last_watered: {e}")
                    lines.append(f"–ü–û–õ–ò–í: –∏–Ω—Ç–µ—Ä–≤–∞–ª {watering.get('watering_interval', 5)} –¥–Ω–µ–π")
            else:
                lines.append(f"–ü–û–õ–ò–í: –∏–Ω—Ç–µ—Ä–≤–∞–ª {watering.get('watering_interval', 5)} –¥–Ω–µ–π")
            lines.append("")
            
            # –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3)
            state_history = context.get('state_history', [])
            if state_history:
                lines.append("–ò–°–¢–û–†–ò–Ø –°–û–°–¢–û–Ø–ù–ò–ô:")
                for state in state_history[:3]:
                    try:
                        state_date = state.get('date')
                        if isinstance(state_date, datetime):
                            date_str = state_date.strftime('%d.%m')
                        else:
                            date_str = "N/A"
                        
                        from_state = state.get('from') or '–Ω–∞—á–∞–ª–æ'
                        to_state = state.get('to', 'unknown')
                        lines.append(f"  {date_str}: {from_state} ‚Üí {to_state}")
                        
                        if state.get('reason'):
                            lines.append(f"    –ü—Ä–∏—á–∏–Ω–∞: {state['reason']}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                        continue
                lines.append("")
            
            # –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            current_problems = context.get('problems', {}).get('current', [])
            if current_problems:
                lines.append("–¢–ï–ö–£–©–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
                for problem in current_problems[:3]:
                    problem_type = problem.get('problem_type', 'unknown')
                    problem_desc = problem.get('problem_description', '')
                    lines.append(f"  - {problem_type}: {problem_desc}")
                    if problem.get('solution_tried'):
                        lines.append(f"    –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è: {problem['solution_tried']}")
                lines.append("")
            
            # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã
            recurring = context.get('problems', {}).get('recurring', [])
            if recurring:
                lines.append("–ü–û–í–¢–û–†–Ø–Æ–©–ò–ï–°–Ø –ü–†–û–ë–õ–ï–ú–´:")
                for rec in recurring:
                    problem_type = rec.get('problem_type', 'unknown')
                    occurrences = rec.get('occurrences', 0)
                    lines.append(f"  - {problem_type} (–ø–æ–≤—Ç–æ—Ä—è–ª–æ—Å—å {occurrences} —Ä–∞–∑)")
                lines.append("")
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —É—Ö–æ–¥–∞
            patterns = context.get('user_patterns', [])
            if patterns:
                lines.append("–ü–ê–¢–¢–ï–†–ù–´ –£–•–û–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
                for pattern in patterns[:3]:
                    if pattern.get('confidence', 0) > 0.5:
                        pattern_type = pattern.get('type', 'unknown')
                        pattern_data = pattern.get('data', {})
                        lines.append(f"  - {pattern_type}: {pattern_data}")
                lines.append("")
            
            # –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3)
            qa_history = context.get('qa_history', [])
            if qa_history:
                lines.append("–ü–†–ï–î–´–î–£–©–ò–ï –í–û–ü–†–û–°–´:")
                for qa in qa_history[:3]:
                    try:
                        qa_date = qa.get('date')
                        if isinstance(qa_date, datetime):
                            date_str = qa_date.strftime('%d.%m')
                        else:
                            date_str = "N/A"
                        
                        question = qa.get('question', '')
                        lines.append(f"  {date_str}: {question}")
                        
                        if qa.get('action_taken'):
                            lines.append(f"    –î–µ–π—Å—Ç–≤–∏–µ: {qa['action_taken']}")
                        if qa.get('resolved'):
                            lines.append(f"    ‚úì –†–µ—à–µ–Ω–æ")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Q&A: {e}")
                        continue
                lines.append("")
            
            return '\n'.join(lines)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return f"–†–ê–°–¢–ï–ù–ò–ï: {context.get('plant_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ')}\n–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
    
    def _format_problem_context(self, context: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã"""
        lines = []
        
        lines.append(f"–†–ê–°–¢–ï–ù–ò–ï: {context.get('plant_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ')}")
        lines.append(f"–°–û–°–¢–û–Ø–ù–ò–ï: {context.get('current_state', 'unknown')}")
        lines.append("")
        
        current_problems = context.get('problems', {}).get('current', [])
        if current_problems:
            lines.append("=== –¢–ï–ö–£–©–ò–ï –ü–†–û–ë–õ–ï–ú–´ ===")
            for problem in current_problems:
                lines.append(f"\n–ü—Ä–æ–±–ª–µ–º–∞: {problem.get('problem_type', 'unknown')}")
                lines.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {problem.get('problem_description', '')}")
                if problem.get('suspected_cause'):
                    lines.append(f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –ø—Ä–∏—á–∏–Ω–∞: {problem['suspected_cause']}")
                if problem.get('solution_tried'):
                    lines.append(f"–ß—Ç–æ —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏: {problem['solution_tried']}")
                    if problem.get('result'):
                        lines.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {problem['result']}")
        
        return '\n'.join(lines)
    
    def _format_care_context(self, context: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —É—Ö–æ–¥"""
        lines = []
        
        lines.append(f"–†–ê–°–¢–ï–ù–ò–ï: {context.get('plant_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ')}")
        lines.append(f"–í–û–ó–†–ê–°–¢ –í –ö–û–õ–õ–ï–ö–¶–ò–ò: {context.get('days_in_collection', 0)} –¥–Ω–µ–π")
        lines.append("")
        
        watering = context.get('watering_info', {})
        lines.append("=== –ò–°–¢–û–†–ò–Ø –ü–û–õ–ò–í–ê ===")
        lines.append(f"–í—Å–µ–≥–æ –ø–æ–ª–∏–≤–æ–≤: {watering.get('total_waterings', 0)}")
        lines.append(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {watering.get('watering_interval', 5)} –¥–Ω–µ–π")
        
        return '\n'.join(lines)
    
    def clear_cache(self, user_id: int = None, plant_id: int = None):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            if user_id and plant_id:
                key = f"{user_id}_{plant_id}"
                if key in self.context_cache:
                    del self.context_cache[key]
            elif user_id:
                keys_to_delete = [k for k in self.context_cache.keys() if k.startswith(f"{user_id}_")]
                for key in keys_to_delete:
                    del self.context_cache[key]
            else:
                self.context_cache.clear()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
memory_manager = PlantMemoryManager()

async def get_plant_context(plant_id: int, user_id: int, focus: str = "general") -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è AI"""
    try:
        return await memory_manager.format_context_for_ai(plant_id, user_id, focus)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        return ""

async def save_interaction(plant_id: int, user_id: int, question: str, answer: str, context_used: dict = None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–∞—Å—Ç–µ–Ω–∏–µ–º"""
    try:
        from database import get_db
        
        db = await get_db()
        await db.save_qa_interaction(plant_id, user_id, question, answer, context_used)
        memory_manager.clear_cache(user_id, plant_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}")
