from datetime import datetime
from typing import Dict
import pytz

def get_current_season(timezone_str: str = 'Europe/Moscow') -> Dict[str, str]:
    """
    Определить текущий сезон и рекомендации по уходу
    
    Returns:
        Dict с информацией о сезоне:
        - season: название сезона
        - season_ru: название на русском
        - month: текущий месяц
        - watering_adjustment: корректировка полива
        - growth_phase: фаза роста растений
        - recommendations: общие рекомендации
    """
    tz = pytz.timezone(timezone_str)
    now = datetime.now(tz)
    month = now.month
    
    # Определяем сезон для северного полушария (Россия)
    if month in [12, 1, 2]:
        season = 'winter'
        season_ru = 'Зима'
        watering_adjustment = 'Сократить полив на 40-60%'
        growth_phase = 'Период покоя'
        recommendations = (
            'Большинство растений находятся в состоянии покоя. '
            'Сокращение полива обязательно - избыточная влага при пониженной температуре '
            'и коротком световом дне приводит к корневым гнилям. '
            'Подкормки прекратить или минимизировать.'
        )
    elif month in [3, 4, 5]:
        season = 'spring'
        season_ru = 'Весна'
        watering_adjustment = 'Постепенно увеличивать полив'
        growth_phase = 'Начало вегетации'
        recommendations = (
            'Растения выходят из периода покоя и начинают активный рост. '
            'Постепенно увеличивайте полив по мере роста новых побегов. '
            'Начинайте подкормки с половинной дозы. '
            'Оптимальное время для пересадки и размножения.'
        )
    elif month in [6, 7, 8]:
        season = 'summer'
        season_ru = 'Лето'
        watering_adjustment = 'Увеличить частоту полива на 30-50%'
        growth_phase = 'Активная вегетация'
        recommendations = (
            'Период максимальной активности растений. '
            'Требуется более частый полив из-за высокой температуры и интенсивного испарения. '
            'Регулярные подкормки каждые 1-2 недели. '
            'Важно: избегайте полива в жару (поливайте утром или вечером).'
        )
    else:  # 9, 10, 11
        season = 'autumn'
        season_ru = 'Осень'
        watering_adjustment = 'Постепенно сокращать полив'
        growth_phase = 'Подготовка к покою'
        recommendations = (
            'Растения готовятся к периоду покоя. '
            'Постепенно сокращайте полив и подкормки. '
            'С октября прекратите подкормки для большинства видов. '
            'Температуру можно снижать, готовя растения к зиме.'
        )
    
    # Дополнительные факторы
    light_hours = get_daylight_hours(month)
    temperature_note = get_temperature_note(season)
    
    return {
        'season': season,
        'season_ru': season_ru,
        'month': month,
        'month_name': now.strftime('%B'),
        'month_name_ru': get_month_name_ru(month),
        'watering_adjustment': watering_adjustment,
        'growth_phase': growth_phase,
        'recommendations': recommendations,
        'light_hours': light_hours,
        'temperature_note': temperature_note,
        'date': now.strftime('%Y-%m-%d')
    }


def get_daylight_hours(month: int) -> str:
    """Получить информацию о продолжительности светового дня"""
    if month in [12, 1]:
        return 'Короткий световой день (7-8 часов) - критический фактор'
    elif month in [2, 11]:
        return 'Короткий световой день (9-10 часов)'
    elif month in [3, 10]:
        return 'Умеренный световой день (11-12 часов)'
    elif month in [4, 9]:
        return 'Достаточный световой день (13-14 часов)'
    elif month in [5, 8]:
        return 'Длинный световой день (15-16 часов)'
    else:  # 6, 7
        return 'Максимальный световой день (17-18 часов)'


def get_temperature_note(season: str) -> str:
    """Получить рекомендации по температуре для сезона"""
    temp_notes = {
        'winter': 'Оптимально 16-20°C (для большинства видов). Избегайте резких перепадов и сквозняков от батарей.',
        'spring': 'Оптимально 18-22°C. Можно повышать температуру постепенно.',
        'summer': 'Оптимально 20-26°C. Обеспечьте проветривание при температуре выше 28°C.',
        'autumn': 'Оптимально 18-22°C. Постепенно снижайте до зимних значений.'
    }
    return temp_notes.get(season, '')


def get_month_name_ru(month: int) -> str:
    """Получить название месяца на русском"""
    months = {
        1: 'Январь', 2: 'Февраль', 3: 'Март', 4: 'Апрель',
        5: 'Май', 6: 'Июнь', 7: 'Июль', 8: 'Август',
        9: 'Сентябрь', 10: 'Октябрь', 11: 'Ноябрь', 12: 'Декабрь'
    }
    return months.get(month, '')


def get_watering_multiplier(season: str) -> float:
    """
    Получить множитель для корректировки интервала полива
    
    Зимой интервал увеличивается (поливаем реже)
    Летом интервал уменьшается (поливаем чаще)
    """
    multipliers = {
        'winter': 1.5,   # Зимой интервал x1.5 (если было 5 дней -> станет 7-8)
        'spring': 1.0,   # Весной базовый интервал
        'summer': 0.7,   # Летом интервал x0.7 (если было 5 дней -> станет 3-4)
        'autumn': 1.2    # Осенью интервал x1.2 (если было 5 дней -> станет 6)
    }
    return multipliers.get(season, 1.0)


def adjust_watering_interval(base_interval: int, season: str) -> int:
    """
    Скорректировать интервал полива с учетом сезона
    
    Args:
        base_interval: базовый интервал полива (дни)
        season: текущий сезон
        
    Returns:
        Скорректированный интервал (дни)
    """
    multiplier = get_watering_multiplier(season)
    adjusted = int(base_interval * multiplier)
    
    # Ограничиваем разумными пределами
    return max(2, min(15, adjusted))


def get_seasonal_care_tips(season: str, plant_state: str = 'healthy') -> str:
    """
    Получить сезонные советы по уходу с учетом состояния растения
    
    Args:
        season: текущий сезон
        plant_state: состояние растения (healthy, flowering, stress и т.д.)
    """
    tips = {
        'winter': {
            'healthy': 'Зимой здоровые растения требуют минимального вмешательства. Главное - не переливать.',
            'flowering': 'Зимнее цветение требует дополнительного освещения (фитолампы) и аккуратного полива.',
            'stress': 'Зимой стрессовые состояния усугубляются. Проверьте температуру (не ниже 16°C) и удаленность от батарей.',
            'dormancy': 'Нормальное состояние для зимы. Минимальный полив, никаких подкормок.'
        },
        'spring': {
            'healthy': 'Весна - лучшее время для пересадки здоровых растений в свежий субстрат.',
            'flowering': 'Весеннее цветение - естественный процесс. Поддержите фосфорно-калийными удобрениями.',
            'stress': 'Весной растения быстро восстанавливаются. Пересадка и обрезка помогут.',
            'active_growth': 'Идеальное время для роста. Обеспечьте питание и своевременный полив.'
        },
        'summer': {
            'healthy': 'Летом следите за влажностью воздуха. Опрыскивания утром полезны для большинства видов.',
            'flowering': 'Летнее цветение требует регулярного полива. Не допускайте пересыхания.',
            'stress': 'Летняя жара может быть причиной стресса. Обеспечьте притенение в полдень и проветривание.',
            'active_growth': 'Пик вегетации. Регулярные подкормки и обильный полив обеспечат быстрый рост.'
        },
        'autumn': {
            'healthy': 'Осенью постепенно готовьте растения к зиме, сокращая полив и подкормки.',
            'flowering': 'Осеннее цветение требует поддержки, несмотря на сезон. Продолжайте подкормки.',
            'stress': 'Стресс осенью может быть связан с резким сокращением света. Рассмотрите досветку.',
            'dormancy': 'Растение готовится к покою. Это нормально - не стимулируйте рост.'
        }
    }
    
    return tips.get(season, {}).get(plant_state, 'Следите за состоянием растения.')
