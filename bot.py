import asyncio
import os
import logging
from datetime import datetime, timedelta
import json
import base64
from io import BytesIO

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiohttp import web
from openai import AsyncOpenAI
from PIL import Image
from database import init_database, get_db

from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz
from plant_memory import memory_manager, get_plant_context, save_interaction

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

MOSCOW_TZ = pytz.timezone('Europe/Moscow')

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8000))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)

temp_analyses = {}

# –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢ –° –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï–ú –°–û–°–¢–û–Ø–ù–ò–Ø
PLANT_IDENTIFICATION_PROMPT = """
–í—ã - —ç–∫—Å–ø–µ—Ä—Ç-–±–æ—Ç–∞–Ω–∏–∫. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –¥–∞–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—É—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.

–í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –í–ò–î–ù–û –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ï—Å–ª–∏ –ø–æ—á–≤–∞ –Ω–µ –≤–∏–¥–Ω–∞ - –Ω–µ –¥–∞–≤–∞–π—Ç–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–ª–∏–≤—É.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ:
1. –§–æ—Ä–º—É –∏ —Ç–µ–∫—Å—Ç—É—Ä—É –ª–∏—Å—Ç—å–µ–≤ (–æ–≤–∞–ª—å–Ω—ã–µ/–¥–ª–∏–Ω–Ω—ã–µ/–º—è—Å–∏—Å—Ç—ã–µ/–≥–ª—è–Ω—Ü–µ–≤—ã–µ/–º–∞—Ç–æ–≤—ã–µ)
2. –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤ –Ω–∞ —Å—Ç–µ–±–ª–µ
3. –¶–≤–µ—Ç –∏ –ø—Ä–æ–∂–∏–ª–∫–∏ –ª–∏—Å—Ç—å–µ–≤
4. –§–æ—Ä–º—É —Ä–æ—Å—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
5. –í–∏–¥–∏–º—ã–µ —Ü–≤–µ—Ç—ã –∏–ª–∏ –ø–ª–æ–¥—ã
6. –†–∞–∑–º–µ—Ä —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –≥–æ—Ä—à–∫–∞

–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –†–ê–°–¢–ï–ù–ò–Ø (–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ):
- healthy (–∑–¥–æ—Ä–æ–≤–æ–µ) - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç, –∑–¥–æ—Ä–æ–≤—ã–π –≤–∏–¥
- flowering (—Ü–≤–µ—Ç–µ–Ω–∏–µ) - –∞–∫—Ç–∏–≤–Ω–æ–µ —Ü–≤–µ—Ç–µ–Ω–∏–µ –∏–ª–∏ –±—É—Ç–æ–Ω—ã
- active_growth (–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç) - –Ω–æ–≤—ã–µ –ø–æ–±–µ–≥–∏, –±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç
- dormancy (–ø–µ—Ä–∏–æ–¥ –ø–æ–∫–æ—è) - –∑–∞–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç, –∑–∏–º–Ω–∏–π –ø–æ–∫–æ–π
- stress (—Å—Ç—Ä–µ—Å—Å/–±–æ–ª–µ–∑–Ω—å) - –∂–µ–ª—Ç—ã–µ –ª–∏—Å—Ç—å—è, –≤—Ä–µ–¥–∏—Ç–µ–ª–∏, –ø—Ä–æ–±–ª–µ–º—ã
- adaptation (–∞–¥–∞–ø—Ç–∞—Ü–∏—è) - –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–∞–¥–∫–∏, —Å–º–µ–Ω—ã –º–µ—Å—Ç–∞

–ü–†–ò–ó–ù–ê–ö–ò –î–õ–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø:
- –¶–≤–µ—Ç–µ–Ω–∏–µ: –±—É—Ç–æ–Ω—ã, —Ü–≤–µ—Ç—ã, —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞
- –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç: –º–æ–ª–æ–¥—ã–µ –ª–∏—Å—Ç—å—è, –Ω–æ–≤—ã–µ –ø–æ–±–µ–≥–∏ —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
- –ü–µ—Ä–∏–æ–¥ –ø–æ–∫–æ—è: –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç, —Å—Ç–∞—Ä—ã–µ –ª–∏—Å—Ç—å—è, –∑–∏–º–Ω–µ–µ –≤—Ä–µ–º—è
- –°—Ç—Ä–µ—Å—Å: –∂–µ–ª—Ç–∏–∑–Ω–∞, –∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ –ø—è—Ç–Ω–∞, –≤—è–ª–æ—Å—Ç—å, –≤—Ä–µ–¥–∏—Ç–µ–ª–∏
- –ê–¥–∞–ø—Ç–∞—Ü–∏—è: –Ω–µ–¥–∞–≤–Ω—è—è –ø–µ—Ä–µ—Å–∞–¥–∫–∞ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)

–ê–ù–ê–õ–ò–ó –ü–û–õ–ò–í–ê - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—á–≤–∞ –≤–∏–¥–Ω–∞:
- –û—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–∏—Å—Ç—å—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —É–≤—è–¥–∞–Ω–∏—è, –∂–µ–ª—Ç–∏–∑–Ω—ã, –∫–æ—Ä–∏—á–Ω–µ–≤—ã—Ö –ø—è—Ç–µ–Ω
- –û—Ü–µ–Ω–∏—Ç–µ —É–ø—Ä—É–≥–æ—Å—Ç—å –∏ —Ç—É—Ä–≥–æ—Ä –ª–∏—Å—Ç—å–µ–≤
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ—Å—É—à–∏–≤–∞–Ω–∏—è
- –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—á–≤—ã (–µ—Å–ª–∏ –≤–∏–¥–Ω–æ)

–î–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–†–ê–°–¢–ï–ù–ò–ï: [–¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –ª–∞—Ç–∏–Ω—Å–∫–æ–º]
–£–í–ï–†–ï–ù–ù–û–°–¢–¨: [–ø—Ä–æ—Ü–µ–Ω—Ç]
–ü–†–ò–ó–ù–ê–ö–ò: [–∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏]
–°–ï–ú–ï–ô–°–¢–í–û: [–±–æ—Ç–∞–Ω–∏—á–µ—Å–∫–æ–µ —Å–µ–º–µ–π—Å—Ç–≤–æ]
–†–û–î–ò–ù–ê: [–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ä–µ–¥–∞]

–¢–ï–ö–£–©–ï–ï_–°–û–°–¢–û–Ø–ù–ò–ï: [–æ–¥–Ω–æ –∏–∑: healthy, flowering, active_growth, dormancy, stress, adaptation]
–ü–†–ò–ß–ò–ù–ê_–°–û–°–¢–û–Ø–ù–ò–Ø: [–ø–æ—á–µ–º—É –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –≤–∏–¥–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ]
–≠–¢–ê–ü_–†–û–°–¢–ê: [young/mature/old - –º–æ–ª–æ–¥–æ–µ/–≤–∑—Ä–æ—Å–ª–æ–µ/—Å—Ç–∞—Ä–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ]

–°–û–°–¢–û–Ø–ù–ò–ï: [–¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ –ª–∏—Å—Ç—å—è–º]

–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó: [–µ—Å–ª–∏ –ø–æ—á–≤–∞ –≤–∏–¥–Ω–∞ - –∞–Ω–∞–ª–∏–∑, –∏–Ω–∞—á–µ: "–ü–æ—á–≤–∞ –Ω–µ –≤–∏–¥–Ω–∞"]
–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]
–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ: [—á–∏—Å–ª–æ –¥–Ω–µ–π: 2-15]

–°–í–ï–¢: [—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Å–≤–µ—â–µ–Ω–∏—é]
–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: [–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω]
–í–õ–ê–ñ–ù–û–°–¢–¨: [—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è]
–ü–û–î–ö–û–†–ú–ö–ê: [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]
–ü–ï–†–ï–°–ê–î–ö–ê: [–∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Å–∞–∂–∏–≤–∞—Ç—å]

–ü–†–û–ë–õ–ï–ú–´: [–≤–æ–∑–º–æ–∂–Ω—ã–µ –±–æ–ª–µ–∑–Ω–∏]
–°–û–í–ï–¢: [—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –¥–ª—è –¢–ï–ö–£–©–ï–ì–û —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è]

–î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: [–µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ù–ï healthy - –¥–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:
- –î–ª—è flowering: —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–ª–∏–≤ –Ω–∞ 2 –¥–Ω—è, –ø–æ–¥–∫–æ—Ä–º–∫–∞ –¥–ª—è —Ü–≤–µ—Ç–µ–Ω–∏—è
- –î–ª—è active_growth: —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–¥–∫–æ—Ä–º–∫—É, –±–æ–ª—å—à–µ —Å–≤–µ—Ç–∞
- –î–ª—è dormancy: —É–º–µ–Ω—å—à–∏—Ç—å –ø–æ–ª–∏–≤ –Ω–∞ 5 –¥–Ω–µ–π, —Å–Ω–∏–∑–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
- –î–ª—è stress: —Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
- –î–ª—è adaptation: —â–∞–¥—è—â–∏–π —Ä–µ–∂–∏–º, –Ω–µ —Ç—Ä–µ–≤–æ–∂–∏—Ç—å]

–ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º–∏ –≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
"""

# FSM States
class PlantStates(StatesGroup):
    waiting_question = State()
    editing_plant_name = State()
    choosing_plant_to_grow = State()
    planting_setup = State()
    waiting_growing_photo = State()
    adding_diary_entry = State()
    onboarding_welcome = State()
    onboarding_demo = State()
    onboarding_quick_start = State()
    waiting_state_update_photo = State()

class FeedbackStates(StatesGroup):
    choosing_type = State()
    writing_message = State()

def get_moscow_now():
    return datetime.now(MOSCOW_TZ)

def get_moscow_date():
    return get_moscow_now().date()

def moscow_to_naive(moscow_datetime):
    if moscow_datetime.tzinfo is not None:
        return moscow_datetime.replace(tzinfo=None)
    return moscow_datetime

def clean_markdown_formatting(text: str) -> str:
    """–û—á–∏—Å—Ç–∏—Ç—å Markdown –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    import re
    
    if not text:
        return ""
    
    # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê MARKDOWN
    
    # 1. –£–±–∏—Ä–∞–µ–º **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** (–≤–∫–ª—é—á–∞—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π)
    text = re.sub(r'\*\*([^\*]+?)\*\*', r'\1', text)
    text = re.sub(r'__([^_]+?)__', r'\1', text)
    
    # 2. –£–±–∏—Ä–∞–µ–º *–∫—É—Ä—Å–∏–≤* –∏ _–∫—É—Ä—Å–∏–≤_
    text = re.sub(r'(?<!\*)\*(?!\*)([^\*]+?)\*(?!\*)', r'\1', text)
    text = re.sub(r'(?<!_)_(?!_)([^_]+?)_(?!_)', r'\1', text)
    
    # 3. –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–¥–∏–Ω–æ—á–Ω—ã–µ * –∏ _ (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å)
    text = re.sub(r'(?<!\w)\*+(?!\w)', '', text)
    text = re.sub(r'(?<!\w)_+(?!\w)', '', text)
    
    # 4. –£–±–∏—Ä–∞–µ–º `–∫–æ–¥`
    text = re.sub(r'`([^`]+?)`', r'\1', text)
    
    # 5. –£–±–∏—Ä–∞–µ–º ### –∑–∞–≥–æ–ª–æ–≤–∫–∏
    text = re.sub(r'^#+\s+(.+)$', r'\1', text, flags=re.MULTILINE)
    
    # 6. –£–±–∏—Ä–∞–µ–º [—Å—Å—ã–ª–∫–∏](url)
    text = re.sub(r'\[([^\]]+)\]\([^\)]+\)', r'\1', text)
    
    # 7. –£–±–∏—Ä–∞–µ–º > —Ü–∏—Ç–∞—Ç—ã
    text = re.sub(r'^>\s+', '', text, flags=re.MULTILINE)
    
    # 8. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ø–∏—Å–∫–∏ (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã)
    text = re.sub(r'^\s*[-\*]\s+', '‚Ä¢ ', text, flags=re.MULTILINE)
    
    # –û–ß–ò–°–¢–ö–ê HTML –¢–ï–ì–û–í
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ HTML —Ç–µ–≥–∏ –∫—Ä–æ–º–µ –±–∞–∑–æ–≤—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ: <b>, <i>, <u>, <s>, <code>, <pre>
    allowed_tags_pattern = r'</?(?!/?(?:b|i|u|s|code|pre)\b)[^>]+>'
    text = re.sub(allowed_tags_pattern, '', text)
    
    # –£–±–∏—Ä–∞–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä </i> –±–µ–∑ <i>)
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    for tag in ['b', 'i', 'u', 's', 'code', 'pre']:
        # –ü–æ–¥—Å—á–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤
        open_tags = re.findall(f'<{tag}>', text)
        close_tags = re.findall(f'</{tag}>', text)
        
        # –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö –±–æ–ª—å—à–µ - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ
        if len(close_tags) > len(open_tags):
            diff = len(close_tags) - len(open_tags)
            for _ in range(diff):
                # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –≤—Å—Ç—Ä–µ—Ç–∏–≤—à–∏–π—Å—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
                text = text.replace(f'</{tag}>', '', 1)
    
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'  +', ' ', text)
    
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ (–±–æ–ª—å—à–µ 2)
    text = re.sub(r'\n{3,}', '\n\n', text)
    
    return text.strip()

# –ú–ê–ü–ü–ò–ù–ì –°–û–°–¢–û–Ø–ù–ò–ô
STATE_EMOJI = {
    'healthy': 'üå±',
    'flowering': 'üíê',
    'active_growth': 'üåø',
    'dormancy': 'üò¥',
    'stress': '‚ö†Ô∏è',
    'adaptation': 'üîÑ'
}

STATE_NAMES = {
    'healthy': '–ó–¥–æ—Ä–æ–≤–æ–µ',
    'flowering': '–¶–≤–µ—Ç–µ–Ω–∏–µ',
    'active_growth': '–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç',
    'dormancy': '–ü–µ—Ä–∏–æ–¥ –ø–æ–∫–æ—è',
    'stress': '–°—Ç—Ä–µ—Å—Å/–ë–æ–ª–µ–∑–Ω—å',
    'adaptation': '–ê–¥–∞–ø—Ç–∞—Ü–∏—è'
}

def get_state_recommendations(state: str, plant_name: str = "—Ä–∞—Å—Ç–µ–Ω–∏–µ") -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    recommendations = {
        'flowering': f"""
üíê <b>{plant_name} —Ü–≤–µ—Ç–µ—Ç!</b>

<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É—Ö–æ–¥–µ:</b>
‚Ä¢ üíß <b>–ü–æ–ª–∏–≤:</b> –ß–∞—â–µ –Ω–∞ 2 –¥–Ω—è (–±–æ–ª—å—à–µ –≤–æ–¥—ã –ø—Ä–∏ —Ü–≤–µ—Ç–µ–Ω–∏–∏)
‚Ä¢ üçΩÔ∏è <b>–ü–æ–¥–∫–æ—Ä–º–∫–∞:</b> –£–¥–æ–±—Ä–µ–Ω–∏–µ –¥–ª—è —Ü–≤–µ—Ç–µ–Ω–∏—è 1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
‚Ä¢ ‚òÄÔ∏è <b>–°–≤–µ—Ç:</b> –ë–æ–ª—å—à–µ —Å–≤–µ—Ç–∞, –Ω–æ –∏–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä—è–º—ã—Ö –ª—É—á–µ–π
‚Ä¢ üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> –°—Ç–∞–±–∏–ª—å–Ω–∞—è, –±–µ–∑ –ø–µ—Ä–µ–ø–∞–¥–æ–≤

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ù–µ –ø–µ—Ä–µ–º–µ—â–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Ü–≤–µ—Ç–µ–Ω–∏—è!
üí° <b>–°–æ–≤–µ—Ç:</b> –£–¥–∞–ª—è–π—Ç–µ —É–≤—è–¥—à–∏–µ —Ü–≤–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–µ–Ω–∏—è
""",
        'active_growth': f"""
üåø <b>{plant_name} –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞—Å—Ç–µ—Ç!</b>

<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É—Ö–æ–¥–µ:</b>
‚Ä¢ üíß <b>–ü–æ–ª–∏–≤:</b> –†–µ–≥—É–ª—è—Ä–Ω—ã–π, –Ω–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –ø–µ—Ä–µ—Å—ã—Ö–∞–Ω–∏—è
‚Ä¢ üçΩÔ∏è <b>–ü–æ–¥–∫–æ—Ä–º–∫–∞:</b> –ö–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏ —É–¥–æ–±—Ä–µ–Ω–∏–µ–º –¥–ª—è —Ä–æ—Å—Ç–∞
‚Ä¢ ‚òÄÔ∏è <b>–°–≤–µ—Ç:</b> –ú–∞–∫—Å–∏–º—É–º —Å–≤–µ—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑–∞
‚Ä¢ ü™¥ <b>–ü–µ—Ä–µ—Å–∞–¥–∫–∞:</b> –ï—Å–ª–∏ –∫–æ—Ä–Ω—è–º —Ç–µ—Å–Ω–æ - –ø–µ—Ä–µ—Å–∞–¥–∏—Ç–µ

üí° <b>–°–æ–≤–µ—Ç:</b> –≠—Ç–æ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–æ–Ω—ã
""",
        'dormancy': f"""
üò¥ <b>{plant_name} –≤ –ø–µ—Ä–∏–æ–¥–µ –ø–æ–∫–æ—è</b>

<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É—Ö–æ–¥–µ:</b>
‚Ä¢ üíß <b>–ü–æ–ª–∏–≤:</b> –†–µ–∂–µ –Ω–∞ 5 –¥–Ω–µ–π (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ–ª–∏–≤)
‚Ä¢ üçΩÔ∏è <b>–ü–æ–¥–∫–æ—Ä–º–∫–∞:</b> –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ –≤–µ—Å–Ω—ã
‚Ä¢ üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> –ü—Ä–æ—Ö–ª–∞–¥–Ω–µ–µ 15-18¬∞C
‚Ä¢ ‚òÄÔ∏è <b>–°–≤–µ—Ç:</b> –ú–µ–Ω—å—à–µ —Å–≤–µ—Ç–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ

üí° <b>–°–æ–≤–µ—Ç:</b> –í–µ—Å–Ω–æ–π —Ä–∞—Å—Ç–µ–Ω–∏–µ –ø—Ä–æ—Å–Ω–µ—Ç—Å—è —Å –Ω–æ–≤—ã–º–∏ —Å–∏–ª–∞–º–∏!
‚ö†Ô∏è –ù–µ —Ç—Ä–µ–≤–æ–∂—å—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
""",
        'stress': f"""
‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ! {plant_name} –≤ —Å—Ç—Ä–µ—Å—Å–µ</b>

<b>–°—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ üîç <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</b> –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É (–ø–æ–ª–∏–≤/—Å–≤–µ—Ç/–≤—Ä–µ–¥–∏—Ç–µ–ª–∏)
‚Ä¢ üíß <b>–ü–æ–ª–∏–≤:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∂–∏–º
‚Ä¢ ‚úÇÔ∏è <b>–û–±—Ä–µ–∑–∫–∞:</b> –£–¥–∞–ª–∏—Ç–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—å—è
‚Ä¢ ü¶† <b>–í—Ä–µ–¥–∏—Ç–µ–ª–∏:</b> –û—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–∏—Å—Ç—å—è —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω
‚Ä¢ üí® <b>–ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ:</b> –£–ª—É—á—à–∏—Ç–µ —Ü–∏—Ä–∫—É–ª—è—Ü–∏—é –≤–æ–∑–¥—É—Ö–∞

üì∏ <b>–í–∞–∂–Ω–æ:</b> –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ 3-5 –¥–Ω–µ–π –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è!
‚ùì –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç - –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Å —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã
""",
        'adaptation': f"""
üîÑ <b>{plant_name} –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è</b>

<b>–©–∞–¥—è—â–∏–π —Ä–µ–∂–∏–º:</b>
‚Ä¢ üíß <b>–ü–æ–ª–∏–≤:</b> –£–º–µ—Ä–µ–Ω–Ω—ã–π, –±–µ–∑ –ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–∏—è
‚Ä¢ ‚òÄÔ∏è <b>–°–≤–µ—Ç:</b> –ù–µ —Å—Ç–∞–≤—å—Ç–µ –Ω–∞ —è—Ä–∫–æ–µ —Å–æ–ª–Ω—Ü–µ —Å—Ä–∞–∑—É
‚Ä¢ üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> –°—Ç–∞–±–∏–ª—å–Ω–∞—è, –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞
‚Ä¢ ‚è∞ <b>–í—Ä–µ–º—è:</b> –î–∞–π—Ç–µ 2-3 –Ω–µ–¥–µ–ª–∏ –Ω–∞ –ø—Ä–∏–≤—ã–∫–∞–Ω–∏–µ

üí° <b>–°–æ–≤–µ—Ç:</b> –ù–µ –ø–µ—Ä–µ—Å–∞–∂–∏–≤–∞–π—Ç–µ –∏ –Ω–µ —Ç—Ä–µ–≤–æ–∂—å—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ
üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
""",
        'healthy': f"""
üå± <b>{plant_name} –∑–¥–æ—Ä–æ–≤–æ–µ!</b>

<b>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ö–æ–¥:</b>
‚Ä¢ üíß –†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ–ª–∏–≤ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É
‚Ä¢ üçΩÔ∏è –ü–æ–¥–∫–æ—Ä–º–∫–∞ –ø–æ —Å–µ–∑–æ–Ω—É
‚Ä¢ ‚òÄÔ∏è –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—Ç–∞
‚Ä¢ üå°Ô∏è –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞

üí° <b>–°–æ–≤–µ—Ç:</b> –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!
üì∏ –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
"""
    }
    
    return recommendations.get(state, recommendations['healthy'])

# === –°–ò–°–¢–ï–ú–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ===

async def check_and_send_reminders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        db = await get_db()
        
        moscow_now = get_moscow_now()
        moscow_date = moscow_now.date()
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ
        async with db.pool.acquire() as conn:
            plants_to_water = await conn.fetch("""
                SELECT p.id, p.user_id, 
                       COALESCE(p.custom_name, p.plant_name, '–†–∞—Å—Ç–µ–Ω–∏–µ #' || p.id) as display_name,
                       p.last_watered, 
                       COALESCE(p.watering_interval, 5) as watering_interval, 
                       p.photo_file_id, p.notes, p.current_state, p.growth_stage
                FROM plants p
                JOIN user_settings us ON p.user_id = us.user_id
                WHERE p.reminder_enabled = TRUE 
                  AND us.reminder_enabled = TRUE
                  AND p.plant_type = 'regular'
                  AND (
                    p.last_watered IS NULL 
                    OR p.last_watered::date + (COALESCE(p.watering_interval, 5) || ' days')::interval <= $1::date
                  )
                  AND NOT EXISTS (
                    SELECT 1 FROM reminders r 
                    WHERE r.plant_id = p.id 
                    AND r.last_sent::date = $1::date
                  )
                ORDER BY p.last_watered ASC NULLS FIRST
            """, moscow_date)
            
            for plant in plants_to_water:
                await send_watering_reminder(plant)
        
        await check_and_send_growing_reminders()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

async def check_monthly_photo_reminders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ"""
    try:
        db = await get_db()
        plants_for_reminder = await db.get_plants_for_monthly_reminder()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        users_plants = {}
        for plant in plants_for_reminder:
            user_id = plant['user_id']
            if user_id not in users_plants:
                users_plants[user_id] = []
            users_plants[user_id].append(plant)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_id, plants in users_plants.items():
            await send_monthly_photo_reminder(user_id, plants)
            await db.mark_monthly_reminder_sent(user_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

async def send_monthly_photo_reminder(user_id: int, plants: list):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—è—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ"""
    try:
        if not plants:
            return
        
        plants_text = ""
        for i, plant in enumerate(plants[:5], 1):
            plant_name = plant.get('custom_name') or plant.get('plant_name') or f"–†–∞—Å—Ç–µ–Ω–∏–µ #{plant['id']}"
            days_ago = (get_moscow_now() - plant['last_photo_analysis']).days
            current_state = STATE_EMOJI.get(plant.get('current_state', 'healthy'), 'üå±')
            plants_text += f"{i}. {current_state} {plant_name} (—Ñ–æ—Ç–æ {days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)\n"
        
        if len(plants) > 5:
            plants_text += f"...–∏ –µ—â–µ {len(plants) - 5} —Ä–∞—Å—Ç–µ–Ω–∏–π\n"
        
        message_text = f"""
üì∏ <b>–í—Ä–µ–º—è –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π!</b>

–ü—Ä–æ—à–µ–ª –º–µ—Å—è—Ü —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:

{plants_text}

üí° <b>–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?</b>
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ —Ä–æ—Å—Ç–∞
‚Ä¢ –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π
‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —É—Ö–æ–¥–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é

üì∑ <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è —Å—Ä–∞–≤–Ω—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º!

üå± –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ —Ñ–æ—Ç–æ
"""
        
        keyboard = [
            [InlineKeyboardButton(text="üåø –ö –º–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="my_plants")],
            [InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", callback_data="snooze_monthly_reminder")],
            [InlineKeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å —Ç–∞–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="disable_monthly_reminders")],
        ]
        
        await bot.send_message(
            chat_id=user_id,
            text=message_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
        logger.info(f"üì∏ –ú–µ—Å—è—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({len(plants)} —Ä–∞—Å—Ç–µ–Ω–∏–π)")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def check_and_send_growing_reminders():
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —ç—Ç–∞–ø–∞–º –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è"""
    try:
        db = await get_db()
        moscow_now = get_moscow_now()
        
        async with db.pool.acquire() as conn:
            reminders = await conn.fetch("""
                SELECT r.id as reminder_id, r.task_day, r.stage_number,
                       gp.id as growing_id, gp.user_id, gp.plant_name, 
                       gp.task_calendar, gp.current_stage, gp.started_date,
                       gp.photo_file_id
                FROM reminders r
                JOIN growing_plants gp ON r.growing_plant_id = gp.id
                JOIN user_settings us ON gp.user_id = us.user_id
                WHERE r.reminder_type = 'task'
                  AND r.is_active = TRUE
                  AND us.reminder_enabled = TRUE
                  AND gp.status = 'active'
                  AND r.next_date::date <= $1::date
                  AND (r.last_sent IS NULL OR r.last_sent::date < $1::date)
            """, moscow_now.date())
            
            for reminder in reminders:
                await send_task_reminder(reminder)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è: {e}")

async def send_task_reminder(reminder_row):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        user_id = reminder_row['user_id']
        growing_id = reminder_row['growing_id']
        plant_name = reminder_row['plant_name']
        task_day = reminder_row['task_day']
        task_calendar = reminder_row['task_calendar']
        current_stage = reminder_row['current_stage']
        started_date = reminder_row['started_date']
        
        stage_key = f"stage_{current_stage + 1}"
        task_info = None
        
        if task_calendar and stage_key in task_calendar:
            tasks = task_calendar[stage_key].get('tasks', [])
            for task in tasks:
                if task.get('day') == task_day:
                    task_info = task
                    break
        
        if not task_info:
            return
        
        task_icon = task_info.get('icon', 'üìã')
        task_title = task_info.get('title', '–ó–∞–¥–∞—á–∞')
        task_description = task_info.get('description', '')
        
        days_since_start = (get_moscow_now().date() - started_date.date()).days
        
        message_text = f"{task_icon} <b>–í—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!</b>\n\n"
        message_text += f"üå± <b>{plant_name}</b>\n"
        message_text += f"üìÖ –î–µ–Ω—å {days_since_start} –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è\n\n"
        message_text += f"üìã <b>{task_title}</b>\n"
        message_text += f"üìù {task_description}\n\n"
        message_text += f"üì∏ –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
        
        keyboard = [
            [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!", callback_data=f"task_done_{growing_id}_{task_day}")],
            [InlineKeyboardButton(text="üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"add_diary_photo_{growing_id}")],
        ]
        
        if reminder_row['photo_file_id']:
            await bot.send_photo(
                chat_id=user_id,
                photo=reminder_row['photo_file_id'],
                caption=message_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        else:
            await bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        
        moscow_now = get_moscow_now()
        moscow_now_naive = moscow_now.replace(tzinfo=None)
        
        db = await get_db()
        async with db.pool.acquire() as conn:
            await conn.execute("""
                UPDATE reminders
                SET last_sent = $1,
                    send_count = COALESCE(send_count, 0) + 1
                WHERE id = $2
            """, moscow_now_naive, reminder_row['reminder_id'])
        
        await schedule_next_task_reminder(growing_id, user_id, task_calendar, task_day)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏: {e}")

async def schedule_next_task_reminder(growing_id: int, user_id: int, task_calendar: dict, current_day: int):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É"""
    try:
        db = await get_db()
        
        growing_plant = await db.get_growing_plant_by_id(growing_id, user_id)
        if not growing_plant:
            return
        
        current_stage = growing_plant['current_stage']
        stage_key = f"stage_{current_stage + 1}"
        
        if stage_key in task_calendar and 'tasks' in task_calendar[stage_key]:
            tasks = task_calendar[stage_key]['tasks']
            sorted_tasks = sorted(tasks, key=lambda x: x.get('day', 0))
            
            for task in sorted_tasks:
                task_day = task.get('day', 0)
                
                if task_day > current_day:
                    started_date = growing_plant['started_date']
                    reminder_date = started_date + timedelta(days=task_day)
                    reminder_date_naive = reminder_date.replace(tzinfo=None) if reminder_date.tzinfo else reminder_date
                    
                    await db.create_growing_reminder(
                        growing_id=growing_id,
                        user_id=user_id,
                        reminder_type="task",
                        next_date=reminder_date_naive,
                        stage_number=current_stage + 1,
                        task_day=task_day
                    )
                    
                    return
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")

async def send_watering_reminder(plant_row):
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    try:
        user_id = plant_row['user_id']
        plant_id = plant_row['id']
        plant_name = plant_row['display_name']
        current_state = plant_row.get('current_state', 'healthy')
        
        db = await get_db()
        plant_info = await db.get_plant_by_id(plant_id)
        
        moscow_now = get_moscow_now()
        
        if plant_row['last_watered']:
            last_watered_utc = plant_row['last_watered']
            if last_watered_utc.tzinfo is None:
                last_watered_utc = pytz.UTC.localize(last_watered_utc)
            last_watered_moscow = last_watered_utc.astimezone(MOSCOW_TZ)
            
            days_ago = (moscow_now.date() - last_watered_moscow.date()).days
            if days_ago == 1:
                time_info = f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤ –±—ã–ª –≤—á–µ—Ä–∞"
            else:
                time_info = f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤ –±—ã–ª {days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
        else:
            time_info = "–†–∞—Å—Ç–µ–Ω–∏–µ –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø–æ–ª–∏–≤–∞–ª–∏"
        
        state_emoji = STATE_EMOJI.get(current_state, 'üå±')
        state_name = STATE_NAMES.get(current_state, '–ó–¥–æ—Ä–æ–≤–æ–µ')
        
        message_text = f"üíß <b>–í—Ä–µ–º—è –ø–æ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ!</b>\n\n"
        message_text += f"{state_emoji} <b>{plant_name}</b>\n"
        message_text += f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state_name}\n"
        message_text += f"‚è∞ {time_info}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
        if current_state == 'flowering':
            message_text += f"üíê –†–∞—Å—Ç–µ–Ω–∏–µ —Ü–≤–µ—Ç–µ—Ç - –ø–æ–ª–∏–≤–∞–π—Ç–µ —á–∞—â–µ!\n"
        elif current_state == 'dormancy':
            message_text += f"üò¥ –ü–µ—Ä–∏–æ–¥ –ø–æ–∫–æ—è - –ø–æ–ª–∏–≤–∞–π—Ç–µ —Ä–µ–∂–µ\n"
        elif current_state == 'stress':
            message_text += f"‚ö†Ô∏è –†–∞—Å—Ç–µ–Ω–∏–µ –≤ —Å—Ç—Ä–µ—Å—Å–µ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã!\n"
        
        interval = plant_row.get('watering_interval', 5)
        message_text += f"\n‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {interval} –¥–Ω–µ–π"
        
        keyboard = [
            [InlineKeyboardButton(text="üíß –ü–æ–ª–∏–ª(–∞)!", callback_data=f"water_plant_{plant_id}")],
            [InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞", callback_data=f"snooze_{plant_id}")],
            [InlineKeyboardButton(text="üì∏ –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ", callback_data=f"update_state_{plant_id}")],
        ]
        
        await bot.send_photo(
            chat_id=user_id,
            photo=plant_row['photo_file_id'],
            caption=message_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
        moscow_now_str = moscow_now.strftime('%Y-%m-%d %H:%M:%S')
        async with db.pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO reminders (user_id, plant_id, reminder_type, next_date, last_sent)
                VALUES ($1, $2, 'watering', $3::timestamp, $3::timestamp)
                ON CONFLICT (user_id, plant_id, reminder_type) 
                WHERE is_active = TRUE
                DO UPDATE SET 
                    last_sent = $3::timestamp,
                    send_count = COALESCE(reminders.send_count, 0) + 1
            """, user_id, plant_id, moscow_now_str)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def create_plant_reminder(plant_id: int, user_id: int, interval_days: int = 5):
    """–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    try:
        db = await get_db()
        moscow_now = get_moscow_now()
        next_watering = moscow_now + timedelta(days=interval_days)
        next_watering_naive = next_watering.replace(tzinfo=None)
        
        await db.create_reminder(
            user_id=user_id,
            plant_id=plant_id,
            reminder_type='watering',
            next_date=next_watering_naive
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# === –ê–ù–ê–õ–ò–ó –†–ê–°–¢–ï–ù–ò–ô –° –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï–ú –°–û–°–¢–û–Ø–ù–ò–Ø ===

def extract_plant_state_from_analysis(raw_analysis: str) -> dict:
    """–ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ AI"""
    state_info = {
        'current_state': 'healthy',
        'state_reason': '',
        'growth_stage': 'young',
        'watering_adjustment': 0,
        'feeding_adjustment': None,
        'recommendations': ''
    }
    
    if not raw_analysis:
        return state_info
    
    lines = raw_analysis.split('\n')
    
    for line in lines:
        line = line.strip()
        
        if line.startswith("–¢–ï–ö–£–©–ï–ï_–°–û–°–¢–û–Ø–ù–ò–ï:"):
            state_text = line.replace("–¢–ï–ö–£–©–ï–ï_–°–û–°–¢–û–Ø–ù–ò–ï:", "").strip().lower()
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if 'flowering' in state_text or '—Ü–≤–µ—Ç–µ–Ω' in state_text:
                state_info['current_state'] = 'flowering'
                state_info['watering_adjustment'] = -2  # –ü–æ–ª–∏–≤–∞—Ç—å —á–∞—â–µ
            elif 'active_growth' in state_text or '–∞–∫—Ç–∏–≤–Ω' in state_text:
                state_info['current_state'] = 'active_growth'
                state_info['feeding_adjustment'] = 7  # –ü–æ–¥–∫–æ—Ä–º–∫–∞ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
            elif 'dormancy' in state_text or '–ø–æ–∫–æ–π' in state_text:
                state_info['current_state'] = 'dormancy'
                state_info['watering_adjustment'] = 5  # –ü–æ–ª–∏–≤–∞—Ç—å —Ä–µ–∂–µ
            elif 'stress' in state_text or '—Å—Ç—Ä–µ—Å—Å' in state_text or '–±–æ–ª–µ–∑–Ω' in state_text:
                state_info['current_state'] = 'stress'
            elif 'adaptation' in state_text or '–∞–¥–∞–ø—Ç–∞—Ü' in state_text:
                state_info['current_state'] = 'adaptation'
            else:
                state_info['current_state'] = 'healthy'
        
        elif line.startswith("–ü–†–ò–ß–ò–ù–ê_–°–û–°–¢–û–Ø–ù–ò–Ø:"):
            state_info['state_reason'] = line.replace("–ü–†–ò–ß–ò–ù–ê_–°–û–°–¢–û–Ø–ù–ò–Ø:", "").strip()
        
        elif line.startswith("–≠–¢–ê–ü_–†–û–°–¢–ê:"):
            stage_text = line.replace("–≠–¢–ê–ü_–†–û–°–¢–ê:", "").strip().lower()
            if 'young' in stage_text or '–º–æ–ª–æ–¥' in stage_text:
                state_info['growth_stage'] = 'young'
            elif 'mature' in stage_text or '–≤–∑—Ä–æ—Å–ª' in stage_text:
                state_info['growth_stage'] = 'mature'
            elif 'old' in stage_text or '—Å—Ç–∞—Ä' in stage_text:
                state_info['growth_stage'] = 'old'
        
        elif line.startswith("–î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"):
            state_info['recommendations'] = line.replace("–î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:", "").strip()
    
    return state_info

def extract_personal_watering_info(analysis_text: str) -> dict:
    """–ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–∏–≤–µ"""
    watering_info = {
        "interval_days": 5,
        "personal_recommendations": "",
        "current_state": "",
        "needs_adjustment": False
    }
    
    if not analysis_text:
        return watering_info
    
    lines = analysis_text.split('\n')
    
    for line in lines:
        line = line.strip()
        
        if line.startswith("–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ:"):
            interval_text = line.replace("–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ:", "").strip()
            import re
            numbers = re.findall(r'\d+', interval_text)
            if numbers:
                try:
                    interval = int(numbers[0])
                    if 1 <= interval <= 15:
                        watering_info["interval_days"] = interval
                except:
                    pass
        
        elif line.startswith("–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó:"):
            current_state = line.replace("–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó:", "").strip()
            watering_info["current_state"] = current_state
            if "–Ω–µ –≤–∏–¥–Ω–∞" in current_state.lower() or "–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å" in current_state.lower():
                watering_info["needs_adjustment"] = True
            elif any(word in current_state.lower() for word in ["–ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω", "–ø–µ—Ä–µ–ª–∏–≤", "–Ω–µ–¥–æ–ø–æ–ª–∏—Ç", "–ø–µ—Ä–µ—Å—É—à–µ–Ω", "–ø—Ä–æ–±–ª–µ–º"]):
                watering_info["needs_adjustment"] = True
        
        elif line.startswith("–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"):
            recommendations = line.replace("–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:", "").strip()
            watering_info["personal_recommendations"] = recommendations
            
    return watering_info

def format_plant_analysis(raw_text: str, confidence: float = None, state_info: dict = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""
    lines = [line.strip() for line in raw_text.split('\n') if line.strip()]
    formatted = ""
    
    plant_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ"
    confidence_level = confidence or 0
    
    for line in lines:
        if line.startswith("–†–ê–°–¢–ï–ù–ò–ï:"):
            plant_name = line.replace("–†–ê–°–¢–ï–ù–ò–ï:", "").strip()
            display_name = plant_name.split("(")[0].strip()
            formatted += f"üåø <b>{display_name}</b>\n"
            if "(" in plant_name:
                latin_name = plant_name[plant_name.find("(")+1:plant_name.find(")")]
                formatted += f"üè∑Ô∏è <i>{latin_name}</i>\n"
            
        elif line.startswith("–£–í–ï–†–ï–ù–ù–û–°–¢–¨:"):
            conf = line.replace("–£–í–ï–†–ï–ù–ù–û–°–¢–¨:", "").strip()
            try:
                confidence_level = float(conf.replace("%", ""))
                if confidence_level >= 80:
                    conf_icon = "üéØ"
                elif confidence_level >= 60:
                    conf_icon = "üé™"
                else:
                    conf_icon = "ü§î"
                formatted += f"{conf_icon} <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {conf}\n\n"
            except:
                formatted += f"üé™ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {conf}\n\n"
        
        elif line.startswith("–¢–ï–ö–£–©–ï–ï_–°–û–°–¢–û–Ø–ù–ò–ï:"):
            pass
        
        elif line.startswith("–°–û–°–¢–û–Ø–ù–ò–ï:"):
            condition = line.replace("–°–û–°–¢–û–Ø–ù–ò–ï:", "").strip()
            if any(word in condition.lower() for word in ["–∑–¥–æ—Ä–æ–≤", "—Ö–æ—Ä–æ—à", "–æ—Ç–ª–∏—á–Ω", "–Ω–æ—Ä–º"]):
                icon = "‚úÖ"
            elif any(word in condition.lower() for word in ["–ø—Ä–æ–±–ª–µ–º", "–±–æ–ª–µ–Ω", "–ø–ª–æ—Ö", "—Å—Ç—Ä–µ—Å—Å"]):
                icon = "‚ö†Ô∏è"
            else:
                icon = "‚ÑπÔ∏è"
            formatted += f"{icon} <b>–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {condition}\n\n"
        
        elif line.startswith("–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó:"):
            analysis = line.replace("–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó:", "").strip()
            if "–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ" in analysis.lower() or "–Ω–µ –≤–∏–¥–Ω–∞" in analysis.lower():
                icon = "‚ùì"
            else:
                icon = "üíß"
            formatted += f"{icon} <b>–ê–Ω–∞–ª–∏–∑ –ø–æ–ª–∏–≤–∞:</b> {analysis}\n"
            
        elif line.startswith("–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"):
            recommendations = line.replace("–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:", "").strip()
            formatted += f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> {recommendations}\n"
            
        elif line.startswith("–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ:"):
            interval = line.replace("–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ:", "").strip()
            formatted += f"‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞:</b> –∫–∞–∂–¥—ã–µ {interval} –¥–Ω–µ–π\n\n"
            
        elif line.startswith("–°–í–ï–¢:"):
            light = line.replace("–°–í–ï–¢:", "").strip()
            formatted += f"‚òÄÔ∏è <b>–û—Å–≤–µ—â–µ–Ω–∏–µ:</b> {light}\n"
            
        elif line.startswith("–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê:"):
            temp = line.replace("–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê:", "").strip()
            formatted += f"üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temp}\n"
            
        elif line.startswith("–í–õ–ê–ñ–ù–û–°–¢–¨:"):
            humidity = line.replace("–í–õ–ê–ñ–ù–û–°–¢–¨:", "").strip()
            formatted += f"üí® <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {humidity}\n"
            
        elif line.startswith("–ü–û–î–ö–û–†–ú–ö–ê:"):
            feeding = line.replace("–ü–û–î–ö–û–†–ú–ö–ê:", "").strip()
            formatted += f"üçΩÔ∏è <b>–ü–æ–¥–∫–æ—Ä–º–∫–∞:</b> {feeding}\n"
        
        elif line.startswith("–°–û–í–ï–¢:"):
            advice = line.replace("–°–û–í–ï–¢:", "").strip()
            formatted += f"\nüí° <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç:</b> {advice}"
    
    if state_info:
        current_state = state_info.get('current_state', 'healthy')
        state_emoji = STATE_EMOJI.get(current_state, 'üå±')
        state_name = STATE_NAMES.get(current_state, '–ó–¥–æ—Ä–æ–≤–æ–µ')
        
        formatted = f"\n{state_emoji} <b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {state_name}\n" + formatted
        
        if state_info.get('state_reason'):
            formatted += f"\nüìã <b>–ü–æ—á–µ–º—É:</b> {state_info['state_reason']}"
    
    if confidence_level >= 80:
        formatted += "\n\nüèÜ <i>–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è</i>"
    elif confidence_level >= 60:
        formatted += "\n\nüëç <i>–•–æ—Ä–æ—à–µ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ</i>"
    else:
        formatted += "\n\nü§î <i>–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</i>"
    
    formatted += "\nüíæ <i>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!</i>"
    
    return formatted

async def optimize_image_for_analysis(image_data: bytes, high_quality: bool = True) -> bytes:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        image = Image.open(BytesIO(image_data))
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        if high_quality:
            if max(image.size) < 1024:
                ratio = 1024 / max(image.size)
                new_size = (int(image.size[0] * ratio), int(image.size[1] * ratio))
                image = image.resize(new_size, Image.Resampling.LANCZOS)
            elif max(image.size) > 2048:
                image.thumbnail((2048, 2048), Image.Resampling.LANCZOS)
        else:
            if max(image.size) > 1024:
                image.thumbnail((1024, 1024), Image.Resampling.LANCZOS)
        
        output = BytesIO()
        quality = 95 if high_quality else 85
        image.save(output, format='JPEG', quality=quality, optimize=True)
        return output.getvalue()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        return image_data

async def analyze_with_openai_advanced(image_data: bytes, user_question: str = None, previous_state: str = None) -> dict:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    if not openai_client:
        return {"success": False, "error": "OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
    
    try:
        optimized_image = await optimize_image_for_analysis(image_data, high_quality=True)
        base64_image = base64.b64encode(optimized_image).decode('utf-8')
        
        prompt = PLANT_IDENTIFICATION_PROMPT
        
        if previous_state:
            prompt += f"\n\n–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è: {previous_state}. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å."
        
        if user_question:
            prompt += f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {user_question}"
        
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç-–±–æ—Ç–∞–Ω–∏–∫ —Å 30-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –û–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ."
                },
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}",
                                "detail": "high"
                            }
                        }
                    ]
                }
            ],
            max_tokens=1500,
            temperature=0.2
        )
        
        raw_analysis = response.choices[0].message.content
        
        if len(raw_analysis) < 100:
            raise Exception("–ù–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
        
        confidence = 0
        for line in raw_analysis.split('\n'):
            if line.startswith("–£–í–ï–†–ï–ù–ù–û–°–¢–¨:"):
                try:
                    conf_str = line.replace("–£–í–ï–†–ï–ù–ù–û–°–¢–¨:", "").strip().replace("%", "")
                    confidence = float(conf_str)
                except:
                    confidence = 70
                break
        
        plant_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ"
        for line in raw_analysis.split('\n'):
            if line.startswith("–†–ê–°–¢–ï–ù–ò–ï:"):
                plant_name = line.replace("–†–ê–°–¢–ï–ù–ò–ï:", "").strip()
                break
        
        state_info = extract_plant_state_from_analysis(raw_analysis)
        formatted_analysis = format_plant_analysis(raw_analysis, confidence, state_info)
        
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state_info['current_state']}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%")
        
        return {
            "success": True,
            "analysis": formatted_analysis,
            "raw_analysis": raw_analysis,
            "plant_name": plant_name,
            "confidence": confidence,
            "source": "openai_advanced",
            "state_info": state_info
        }
        
    except Exception as e:
        logger.error(f"‚ùå OpenAI error: {e}")
        return {"success": False, "error": str(e)}

async def analyze_plant_image(image_data: bytes, user_question: str = None, 
                             previous_state: str = None, retry_count: int = 0) -> dict:
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""
    
    logger.info("üîç –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI GPT-4 Vision...")
    openai_result = await analyze_with_openai_advanced(image_data, user_question, previous_state)
    
    if openai_result["success"] and openai_result.get("confidence", 0) >= 50:
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {openai_result.get('confidence')}%")
        return openai_result
    
    if retry_count == 0:
        logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
        return await analyze_plant_image(image_data, user_question, previous_state, retry_count + 1)
    
    if openai_result["success"]:
        logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {openai_result.get('confidence')}%")
        openai_result["needs_retry"] = True
        return openai_result
    
    logger.warning("‚ö†Ô∏è Fallback")
    
    fallback_text = """
–†–ê–°–¢–ï–ù–ò–ï: –ö–æ–º–Ω–∞—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
–£–í–ï–†–ï–ù–ù–û–°–¢–¨: 20%
–¢–ï–ö–£–©–ï–ï_–°–û–°–¢–û–Ø–ù–ò–ï: healthy
–ü–†–ò–ß–ò–ù–ê_–°–û–°–¢–û–Ø–ù–ò–Ø: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
–≠–¢–ê–ü_–†–û–°–¢–ê: young
–°–û–°–¢–û–Ø–ù–ò–ï: –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä
–ü–û–õ–ò–í_–ê–ù–ê–õ–ò–ó: –ü–æ—á–≤–∞ –Ω–µ –≤–∏–¥–Ω–∞
–ü–û–õ–ò–í_–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã
–ü–û–õ–ò–í_–ò–ù–¢–ï–†–í–ê–õ: 5
–°–í–ï–¢: –Ø—Ä–∫–∏–π —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π —Å–≤–µ—Ç
–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: 18-24¬∞C
–í–õ–ê–ñ–ù–û–°–¢–¨: 40-60%
–ü–û–î–ö–û–†–ú–ö–ê: –†–∞–∑ –≤ 2-4 –Ω–µ–¥–µ–ª–∏ –≤–µ—Å–Ω–æ–π-–ª–µ—Ç–æ–º
–°–û–í–ï–¢: –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """.strip()
    
    state_info = extract_plant_state_from_analysis(fallback_text)
    formatted_analysis = format_plant_analysis(fallback_text, 20, state_info)
    
    return {
        "success": True,
        "analysis": formatted_analysis,
        "raw_analysis": fallback_text,
        "plant_name": "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ",
        "confidence": 20,
        "source": "fallback",
        "needs_retry": True,
        "state_info": state_info
    }

# === –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–õ–ê–ù–ê –í–´–†–ê–©–ò–í–ê–ù–ò–Ø ===

async def get_growing_plan_from_ai(plant_name: str) -> tuple:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI"""
    if not openai_client:
        return None, None
    
    try:
        prompt = f"""
–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è –¥–ª—è: {plant_name}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:

üå± –≠–¢–ê–ü 1: –ù–∞–∑–≤–∞–Ω–∏–µ (X –¥–Ω–µ–π)
‚Ä¢ –ó–∞–¥–∞—á–∞ 1
‚Ä¢ –ó–∞–¥–∞—á–∞ 2
‚Ä¢ –ó–∞–¥–∞—á–∞ 3

üåø –≠–¢–ê–ü 2: –ù–∞–∑–≤–∞–Ω–∏–µ (X –¥–Ω–µ–π)
‚Ä¢ –ó–∞–¥–∞—á–∞ 1
‚Ä¢ –ó–∞–¥–∞—á–∞ 2

üå∏ –≠–¢–ê–ü 3: –ù–∞–∑–≤–∞–Ω–∏–µ (X –¥–Ω–µ–π)
‚Ä¢ –ó–∞–¥–∞—á–∞ 1
‚Ä¢ –ó–∞–¥–∞—á–∞ 2

üå≥ –≠–¢–ê–ü 4: –ù–∞–∑–≤–∞–Ω–∏–µ (X –¥–Ω–µ–π)
‚Ä¢ –ó–∞–¥–∞—á–∞ 1
‚Ä¢ –ó–∞–¥–∞—á–∞ 2

–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å:
–ö–ê–õ–ï–ù–î–ê–†–¨_–ó–ê–î–ê–ß: [JSON —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∑–∞–¥–∞—á –ø–æ –¥–Ω—è–º]
"""
        
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é —Ä–∞—Å—Ç–µ–Ω–∏–π. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –ø–ª–∞–Ω—ã."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1200,
            temperature=0.3
        )
        
        plan_text = response.choices[0].message.content
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–¥–∞—á
        task_calendar = create_default_task_calendar(plant_name)
        
        return plan_text, task_calendar
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}")
        return None, None

def create_default_task_calendar(plant_name: str) -> dict:
    """–°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–¥–∞—á"""
    return {
        "stage_1": {
            "name": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –ø–æ—Å–∞–¥–∫–∞",
            "duration_days": 7,
            "tasks": [
                {"day": 1, "title": "–ü–æ—Å–∞–¥–∫–∞", "description": "–ü–æ—Å–∞–¥–∏—Ç–µ —Å–µ–º–µ–Ω–∞/—á–µ—Ä–µ–Ω–æ–∫", "icon": "üå±"},
                {"day": 3, "title": "–ü–µ—Ä–≤—ã–π –ø–æ–ª–∏–≤", "description": "–£–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–ª–µ–π—Ç–µ", "icon": "üíß"},
                {"day": 7, "title": "–ü—Ä–æ–≤–µ—Ä–∫–∞", "description": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å", "icon": "üîç"},
            ]
        },
        "stage_2": {
            "name": "–ü—Ä–æ—Ä–∞—Å—Ç–∞–Ω–∏–µ",
            "duration_days": 14,
            "tasks": [
                {"day": 10, "title": "–ü–µ—Ä–≤—ã–µ –≤—Å—Ö–æ–¥—ã", "description": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ä–æ—Å—Ç–∫–æ–≤", "icon": "üå±"},
                {"day": 14, "title": "–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ–ª–∏–≤", "description": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å", "icon": "üíß"},
            ]
        },
        "stage_3": {
            "name": "–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç",
            "duration_days": 30,
            "tasks": [
                {"day": 21, "title": "–ü–µ—Ä–≤–∞—è –ø–æ–¥–∫–æ—Ä–º–∫–∞", "description": "–í–Ω–µ—Å–∏—Ç–µ —É–¥–æ–±—Ä–µ–Ω–∏–µ", "icon": "üçΩÔ∏è"},
                {"day": 35, "title": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Ç–∞", "description": "–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è", "icon": "üìä"},
            ]
        },
        "stage_4": {
            "name": "–í–∑—Ä–æ—Å–ª–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ",
            "duration_days": 30,
            "tasks": [
                {"day": 50, "title": "–ü–µ—Ä–µ—Å–∞–¥–∫–∞", "description": "–ü–µ—Ä–µ—Å–∞–¥–∏—Ç–µ –≤ –±–æ–ª—å—à–∏–π –≥–æ—Ä—à–æ–∫", "icon": "ü™¥"},
                {"day": 60, "title": "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "description": "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–µ–∂—å—Ç–µ", "icon": "‚úÇÔ∏è"},
            ]
        }
    }

# === –ú–ï–ù–Æ –ù–ê–í–ò–ì–ê–¶–ò–ò ===

def main_menu():
    keyboard = [
        [
            InlineKeyboardButton(text="üå± –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="add_plant"),
            InlineKeyboardButton(text="üåø –í—ã—Ä–∞—Å—Ç–∏—Ç—å —Å –Ω—É–ª—è", callback_data="grow_from_scratch")
        ],
        [
            InlineKeyboardButton(text="üì∏ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data="analyze"),
            InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")
        ],
        [
            InlineKeyboardButton(text="üåø –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data="my_plants"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ],
        [
            InlineKeyboardButton(text="üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback"),
            InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def simple_back_menu():
    keyboard = [
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î (–†–ï–ì–ò–°–¢–†–ò–†–£–Æ–¢–°–Ø –ü–ï–†–í–´–ú–ò!) ===

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º"""
    user_id = message.from_user.id
    
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        db = await get_db()
        
        async with db.pool.acquire() as conn:
            existing_user = await conn.fetchrow(
                "SELECT user_id FROM users WHERE user_id = $1", user_id
            )
            
            if not existing_user:
                await db.add_user(
                    user_id=user_id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name
                )
                
                logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω")
                await start_onboarding(message)
                return
            else:
                logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
                await show_returning_user_welcome(message)
                return
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ /start: {e}", exc_info=True)
        await show_returning_user_welcome(message)

async def start_onboarding(message: types.Message):
    """–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    first_name = message.from_user.first_name or "–¥—Ä—É–≥"
    
    keyboard = [
        [InlineKeyboardButton(text="‚ú® –ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä", callback_data="onboarding_demo")],
        [InlineKeyboardButton(text="üöÄ –•–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É", callback_data="onboarding_quick_start")],
    ]
    
    await message.answer(
        f"üå± –û—Ç–ª–∏—á–Ω–æ, {first_name}! –ì–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å –≤–∞—à–∏–º —Å–∞–¥–æ–≤—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º!\n\n"
        "–î–∞–≤–∞–π—Ç–µ —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –∞ –ø–æ—Ç–æ–º –≤—ã –ø–æ–ø—Ä–æ–±—É–µ—Ç–µ —Å–∞–º–∏?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

async def show_returning_user_welcome(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö—Å—è"""
    first_name = message.from_user.first_name or "–¥—Ä—É–≥"
    
    await message.answer(
        f"üå± –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!\n\n"
        "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ —Å–µ–≥–æ–¥–Ω—è?",
        reply_markup=main_menu()
    )

@dp.message(Command("grow"))
async def grow_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /grow"""
    await message.answer(
        "üåø <b>–í—ã—Ä–∞—â–∏–≤–∞–µ–º —Å –Ω—É–ª—è!</b>\n\n"
        "üå± –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã—Ä–∞—Å—Ç–∏—Ç—å:",
        parse_mode="HTML"
    )
    await state.set_state(PlantStates.choosing_plant_to_grow)

@dp.message(Command("add"))
async def add_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /add"""
    await message.answer(
        "üì∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è</b>\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è:\n"
        "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—é –≤–∏–¥\n"
        "‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "‚Ä¢ –î–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É\n\n"
        "üì∑ –ñ–¥—É –≤–∞—à–µ —Ñ–æ—Ç–æ!",
        parse_mode="HTML"
    )

@dp.message(Command("analyze"))
async def analyze_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /analyze"""
    await message.answer(
        "üîç <b>–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è</b>\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:\n"
        "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–∞\n"
        "‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n"
        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É\n\n"
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å–µ–π—á–∞—Å:",
        parse_mode="HTML"
    )

@dp.message(Command("question"))
async def question_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /question"""
    await message.answer(
        "‚ùì <b>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö</b>\n\n"
        "üí° –Ø –ø–æ–º–æ–≥—É —Å:\n"
        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ –ª–∏—Å—Ç—å–µ–≤\n"
        "‚Ä¢ –†–µ–∂–∏–º–æ–º –ø–æ–ª–∏–≤–∞\n"
        "‚Ä¢ –ü–µ—Ä–µ—Å–∞–¥–∫–æ–π\n"
        "‚Ä¢ –ë–æ–ª–µ–∑–Ω—è–º–∏\n"
        "‚Ä¢ –£–¥–æ–±—Ä–µ–Ω–∏—è–º–∏\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        parse_mode="HTML"
    )
    await state.set_state(PlantStates.waiting_question)

@dp.message(Command("plants"))
async def plants_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /plants"""
    user_id = message.from_user.id
    
    try:
        db = await get_db()
        plants = await db.get_user_plants(user_id, limit=15)
        
        if not plants:
            await message.answer(
                "üå± <b>–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ:\n"
                "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add",
                parse_mode="HTML",
                reply_markup=main_menu()
            )
            return
        
        text = f"üåø <b>–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è ({len(plants)} —Ä–∞—Å—Ç–µ–Ω–∏–π):</b>\n\n"
        
        keyboard_buttons = []
        
        for i, plant in enumerate(plants, 1):
            plant_name = plant['display_name']
            
            if plant.get('type') == 'growing':
                stage_info = plant.get('stage_info', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ')
                text += f"{i}. üå± <b>{plant_name}</b>\n   {stage_info}\n\n"
            else:
                current_state = plant.get('current_state', 'healthy')
                state_emoji = STATE_EMOJI.get(current_state, 'üå±')
                
                moscow_now = get_moscow_now()
                
                if plant.get("last_watered"):
                    last_watered_utc = plant["last_watered"]
                    if last_watered_utc.tzinfo is None:
                        last_watered_utc = pytz.UTC.localize(last_watered_utc)
                    last_watered_moscow = last_watered_utc.astimezone(MOSCOW_TZ)
                    
                    days_ago = (moscow_now.date() - last_watered_moscow.date()).days
                    if days_ago == 0:
                        water_status = "üíß –°–µ–≥–æ–¥–Ω—è"
                    elif days_ago == 1:
                        water_status = "üíß –í—á–µ—Ä–∞"
                    else:
                        water_status = f"üíß {days_ago}–¥"
                else:
                    water_status = "üÜï –ù–æ–≤–æ–µ"
                
                text += f"{i}. {state_emoji} <b>{plant_name}</b>\n   {water_status}\n\n"
            
            short_name = plant_name[:15] + "..." if len(plant_name) > 15 else plant_name
            
            if plant.get('type') == 'growing':
                callback_data = f"edit_growing_{plant['growing_id']}"
            else:
                callback_data = f"edit_plant_{plant['id']}"
            
            keyboard_buttons.append([
                InlineKeyboardButton(text=f"‚öôÔ∏è {short_name}", callback_data=callback_data)
            ])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üíß –ü–æ–ª–∏—Ç—å –≤—Å–µ", callback_data="water_plants")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
        ])
        
        await message.answer(
            text, 
            parse_mode="HTML", 
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

@dp.message(Command("notifications"))
async def notifications_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /notifications"""
    user_id = message.from_user.id
    
    try:
        db = await get_db()
        settings = await db.get_user_reminder_settings(user_id)
        
        if not settings:
            settings = {
                'reminder_enabled': True,
                'reminder_time': '09:00',
                'timezone': 'Europe/Moscow'
            }
        
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if settings['reminder_enabled'] else "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"
        
        text = f"""
üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}
‚è∞ <b>–í—Ä–µ–º—è:</b> {settings['reminder_time']} –ú–°–ö
üåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {settings['timezone']}

<b>–¢–∏–ø—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:</b>
üíß –ü–æ–ª–∏–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00
üì∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ - —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –≤ 10:00
üå± –ó–∞–¥–∞—á–∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è - –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é

üí° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π!
"""
        
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –í–∫–ª—é—á–∏—Ç—å" if not settings['reminder_enabled'] else "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å",
                    callback_data="toggle_reminders"
                )
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
        ]
        
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats"""
    user_id = message.from_user.id
    
    try:
        db = await get_db()
        stats = await db.get_user_stats(user_id)
        
        stats_text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        stats_text += f"üå± <b>–†–∞—Å—Ç–µ–Ω–∏–π:</b> {stats['total_plants']}\n"
        stats_text += f"üíß <b>–ü–æ–ª–∏–≤–æ–≤:</b> {stats['total_waterings']}\n"
        
        if stats['total_growing'] > 0:
            stats_text += f"\nüåø <b>–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ:</b>\n"
            stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_growing']}\n"
            stats_text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['completed_growing']}\n"
        
        if stats['first_plant_date']:
            days_using = (datetime.now().date() - stats['first_plant_date'].date()).days
            stats_text += f"\nüìÖ <b>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ—Ç–∞:</b> {days_using} –¥–Ω–µ–π\n"
        
        stats_text += f"\nüéØ <b>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏!</b>"
        
        await message.answer(
            stats_text,
            parse_mode="HTML",
            reply_markup=main_menu()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", reply_markup=main_menu())

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üå± <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>

<b>üå± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:</b>
‚Ä¢ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ
‚Ä¢ –ü–æ–ª—É—á–∏ –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è

<b>üìä –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π:</b>
‚Ä¢ üíê –¶–≤–µ—Ç–µ–Ω–∏–µ - –æ—Å–æ–±—ã–π —É—Ö–æ–¥
‚Ä¢ üåø –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç - –±–æ–ª—å—à–µ –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ üò¥ –ü–µ—Ä–∏–æ–¥ –ø–æ–∫–æ—è - –º–µ–Ω—å—à–µ –ø–æ–ª–∏–≤–∞
‚Ä¢ ‚ö†Ô∏è –°—Ç—Ä–µ—Å—Å - —Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è

<b>üì∏ –ú–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>
‚Ä¢ –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

<b>‚è∞ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
‚Ä¢ –£—á–∏—Ç—ã–≤–∞—é—Ç —ç—Ç–∞–ø —Ä–æ—Å—Ç–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/grow - –í—ã—Ä–∞—Å—Ç–∏—Ç—å —Å –Ω—É–ª—è
/help - –°–ø—Ä–∞–≤–∫–∞
    """
    
    keyboard = [
        [InlineKeyboardButton(text="üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
    ]
    
    await message.answer(
        help_text, 
        parse_mode="HTML", 
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.message(Command("feedback"))
async def feedback_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /feedback"""
    keyboard = [
        [InlineKeyboardButton(text="üêõ –°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ", callback_data="feedback_bug")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="feedback_analysis_error")],
        [InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="feedback_suggestion")],
        [InlineKeyboardButton(text="‚≠ê –û—Ç–∑—ã–≤", callback_data="feedback_review")],
    ]
    
    await message.answer(
        "üìù <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

# === –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û–ì–†–ê–§–ò–ô ===

@dp.message(StateFilter(PlantStates.waiting_state_update_photo), F.photo)
async def handle_state_update_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    try:
        data = await state.get_data()
        plant_id = data.get('state_plant_id')
        user_id = message.from_user.id
        
        if not plant_id:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã")
            await state.clear()
            return
        
        processing_msg = await message.reply(
            "üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–º–µ–Ω–µ–Ω–∏—è...</b>\n\n"
            "‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ñ–æ—Ç–æ\n"
            "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
            "‚Ä¢ –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...",
            parse_mode="HTML"
        )
        
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_data = await bot.download_file(file.file_path)
        
        db = await get_db()
        plant = await db.get_plant_by_id(plant_id, user_id)
        
        if not plant:
            await processing_msg.delete()
            await message.reply("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return
        
        previous_state = plant.get('current_state', 'healthy')
        plant_name = plant['display_name']
        
        result = await analyze_plant_image(
            file_data.read(), 
            previous_state=previous_state
        )
        
        await processing_msg.delete()
        
        if result["success"]:
            state_info = result.get("state_info", {})
            new_state = state_info.get('current_state', 'healthy')
            state_reason = state_info.get('state_reason', '–ê–Ω–∞–ª–∏–∑ AI')
            
            state_changed = (new_state != previous_state)
            
            await db.update_plant_state(
                plant_id=plant_id,
                user_id=user_id,
                new_state=new_state,
                change_reason=state_reason,
                photo_file_id=photo.file_id,
                ai_analysis=result.get("raw_analysis", ""),
                watering_adjustment=state_info.get('watering_adjustment', 0),
                feeding_adjustment=state_info.get('feeding_adjustment'),
                recommendations=state_info.get('recommendations', '')
            )
            
            async with db.pool.acquire() as conn:
                await conn.execute("""
                    UPDATE plants 
                    SET last_photo_analysis = CURRENT_TIMESTAMP,
                        photo_file_id = $1
                    WHERE id = $2
                """, photo.file_id, plant_id)
            
            response_text = f"üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
            response_text += result['analysis']
            
            if state_changed:
                prev_emoji = STATE_EMOJI.get(previous_state, 'üå±')
                new_emoji = STATE_EMOJI.get(new_state, 'üå±')
                prev_name = STATE_NAMES.get(previous_state, '–ó–¥–æ—Ä–æ–≤–æ–µ')
                new_name = STATE_NAMES.get(new_state, '–ó–¥–æ—Ä–æ–≤–æ–µ')
                
                response_text += f"\n\nüîÑ <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø!</b>\n"
                response_text += f"{prev_emoji} {prev_name} ‚Üí {new_emoji} {new_name}\n\n"
                
                recommendations = get_state_recommendations(new_state, plant_name)
                response_text += f"\n{recommendations}"
            
            keyboard = [
                [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π", callback_data=f"view_state_history_{plant_id}")],
                [InlineKeyboardButton(text="üåø –ö —Ä–∞—Å—Ç–µ–Ω–∏—é", callback_data=f"edit_plant_{plant_id}")],
            ]
            
            await message.reply(
                response_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
            await state.clear()
            
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            await state.clear()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        await message.reply("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
        await state.clear()

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - –ì–õ–ê–í–ù–´–ô –ê–ù–ê–õ–ò–ó"""
    try:
        processing_msg = await message.reply(
            "üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞—Å—Ç–µ–Ω–∏–µ...</b>\n\n"
            "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—é –≤–∏–¥\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
            "‚Ä¢ –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...",
            parse_mode="HTML"
        )
        
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_data = await bot.download_file(file.file_path)
        
        user_question = message.caption if message.caption else None
        result = await analyze_plant_image(file_data.read(), user_question)
        
        await processing_msg.delete()
        
        if result["success"]:
            user_id = message.from_user.id
            
            temp_analyses[user_id] = {
                "analysis": result.get("raw_analysis", result["analysis"]),
                "formatted_analysis": result["analysis"],
                "photo_file_id": photo.file_id,
                "date": get_moscow_now(),
                "source": result.get("source", "unknown"),
                "plant_name": result.get("plant_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ"),
                "confidence": result.get("confidence", 0),
                "needs_retry": result.get("needs_retry", False),
                "state_info": result.get("state_info", {})
            }
            
            state_info = result.get("state_info", {})
            current_state = state_info.get('current_state', 'healthy')
            
            state_recommendations = get_state_recommendations(
                current_state, 
                result.get("plant_name", "—Ä–∞—Å—Ç–µ–Ω–∏–µ")
            )
            
            response_text = f"üå± <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n{result['analysis']}"
            
            if current_state != 'healthy':
                response_text += f"\n\n{state_recommendations}"
            
            keyboard_buttons = [
                [InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="save_plant")],
                [InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏", callback_data="ask_about")],
            ]
            
            if result.get("needs_retry"):
                response_text += "\n\nüì∏ <b>–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏ —è—Ä–∫–æ–º —Å–≤–µ—Ç–µ</b>"
                keyboard_buttons.insert(1, [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="reanalyze")])
            
            keyboard_buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")])
            
            await message.reply(
                response_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            )
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", reply_markup=simple_back_menu())
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.reply("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", reply_markup=simple_back_menu())

# === –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ê–°–¢–ï–ù–ò–ô ===

@dp.callback_query(F.data == "save_plant")
async def save_plant_callback(callback: types.CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    user_id = callback.from_user.id
    
    if user_id in temp_analyses:
        try:
            analysis_data = temp_analyses[user_id]
            raw_analysis = analysis_data.get("analysis", "")
            state_info = analysis_data.get("state_info", {})
            
            watering_info = extract_personal_watering_info(raw_analysis)
            
            db = await get_db()
            plant_id = await db.save_plant(
                user_id=user_id,
                analysis=raw_analysis,
                photo_file_id=analysis_data["photo_file_id"],
                plant_name=analysis_data.get("plant_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ")
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞
            personal_interval = watering_info["interval_days"]
            await db.update_plant_watering_interval(plant_id, personal_interval)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
            current_state = state_info.get('current_state', 'healthy')
            state_reason = state_info.get('state_reason', '–ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ AI')
            
            await db.update_plant_state(
                plant_id=plant_id,
                user_id=user_id,
                new_state=current_state,
                change_reason=state_reason,
                photo_file_id=analysis_data["photo_file_id"],
                ai_analysis=raw_analysis,
                watering_adjustment=state_info.get('watering_adjustment', 0),
                feeding_adjustment=state_info.get('feeding_adjustment'),
                recommendations=state_info.get('recommendations', '')
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é
            await db.save_full_analysis(
                plant_id=plant_id,
                user_id=user_id,
                photo_file_id=analysis_data["photo_file_id"],
                full_analysis=raw_analysis,
                confidence=analysis_data.get("confidence", 0),
                identified_species=analysis_data.get("plant_name"),
                detected_state=current_state,
                watering_advice=watering_info.get("personal_recommendations"),
                lighting_advice=None
            )
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await create_plant_reminder(plant_id, user_id, personal_interval)
            
            del temp_analyses[user_id]
            
            plant_name = analysis_data.get("plant_name", "—Ä–∞—Å—Ç–µ–Ω–∏–µ")
            state_emoji = STATE_EMOJI.get(current_state, 'üå±')
            state_name = STATE_NAMES.get(current_state, '–ó–¥–æ—Ä–æ–≤–æ–µ')
            
            success_text = f"‚úÖ <b>–†–∞—Å—Ç–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            success_text += f"üå± <b>{plant_name}</b> –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n"
            success_text += f"{state_emoji} <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {state_name}\n"
            success_text += f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞: {personal_interval} –¥–Ω–µ–π\n\n"
            success_text += f"üß† <b>–°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n"
            success_text += f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"
            
            await callback.message.answer(success_text, parse_mode="HTML", reply_markup=main_menu())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    else:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ")
    
    await callback.answer()

# === CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@dp.callback_query(F.data == "menu")
async def menu_callback(callback: types.CallbackQuery):
    await callback.message.answer("üå± <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode="HTML", reply_markup=main_menu())
    await callback.answer()

@dp.callback_query(F.data == "my_plants")
async def my_plants_callback(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    user_id = callback.from_user.id
    
    try:
        db = await get_db()
        plants = await db.get_user_plants(user_id, limit=15)
        
        if not plants:
            await callback.message.answer(
                "üå± <b>–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞</b>\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ!",
                parse_mode="HTML",
                reply_markup=main_menu()
            )
            await callback.answer()
            return
        
        text = f"üåø <b>–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è ({len(plants)} —Ä–∞—Å—Ç–µ–Ω–∏–π):</b>\n\n"
        
        keyboard_buttons = []
        
        for i, plant in enumerate(plants, 1):
            plant_name = plant['display_name']
            
            if plant.get('type') == 'growing':
                stage_info = plant.get('stage_info', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ')
                text += f"{i}. üå± <b>{plant_name}</b>\n"
                text += f"   {stage_info}\n\n"
            else:
                current_state = plant.get('current_state', 'healthy')
                state_emoji = STATE_EMOJI.get(current_state, 'üå±')
                
                moscow_now = get_moscow_now()
                
                if plant.get("last_watered"):
                    last_watered_utc = plant["last_watered"]
                    if last_watered_utc.tzinfo is None:
                        last_watered_utc = pytz.UTC.localize(last_watered_utc)
                    last_watered_moscow = last_watered_utc.astimezone(MOSCOW_TZ)
                    
                    days_ago = (moscow_now.date() - last_watered_moscow.date()).days
                    if days_ago == 0:
                        water_status = "üíß –°–µ–≥–æ–¥–Ω—è"
                    elif days_ago == 1:
                        water_status = "üíß –í—á–µ—Ä–∞"
                    else:
                        water_status = f"üíß {days_ago}–¥"
                else:
                    water_status = "üÜï –ù–æ–≤–æ–µ"
                
                text += f"{i}. {state_emoji} <b>{plant_name}</b>\n"
                text += f"   {water_status}\n\n"
            
            short_name = plant_name[:15] + "..." if len(plant_name) > 15 else plant_name
            
            if plant.get('type') == 'growing':
                callback_data = f"edit_growing_{plant['growing_id']}"
            else:
                callback_data = f"edit_plant_{plant['id']}"
            
            keyboard_buttons.append([
                InlineKeyboardButton(text=f"‚öôÔ∏è {short_name}", callback_data=callback_data)
            ])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üíß –ü–æ–ª–∏—Ç—å –≤—Å–µ", callback_data="water_plants")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
        ])
        
        await callback.message.answer(
            text, 
            parse_mode="HTML", 
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_plant_"))
async def edit_plant_callback(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_with_state(plant_id, user_id)
        
        if not plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        plant_name = plant['display_name']
        current_state = plant.get('current_state', 'healthy')
        state_emoji = STATE_EMOJI.get(current_state, 'üå±')
        state_name = STATE_NAMES.get(current_state, '–ó–¥–æ—Ä–æ–≤–æ–µ')
        watering_interval = plant.get('watering_interval', 5)
        state_changes = plant.get('state_changes_count', 0)
        
        moscow_now = get_moscow_now()
        if plant.get("last_watered"):
            last_watered_utc = plant["last_watered"]
            if last_watered_utc.tzinfo is None:
                last_watered_utc = pytz.UTC.localize(last_watered_utc)
            last_watered_moscow = last_watered_utc.astimezone(MOSCOW_TZ)
            
            days_ago = (moscow_now.date() - last_watered_moscow.date()).days
            if days_ago == 0:
                water_status = "üíß –ü–æ–ª–∏—Ç–æ —Å–µ–≥–æ–¥–Ω—è"
            elif days_ago == 1:
                water_status = "üíß –ü–æ–ª–∏—Ç–æ –≤—á–µ—Ä–∞"
            else:
                water_status = f"üíß –ü–æ–ª–∏—Ç–æ {days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
        else:
            water_status = "üÜï –ï—â–µ –Ω–µ –ø–æ–ª–∏–≤–∞–ª–∏"
        
        keyboard = [
            [InlineKeyboardButton(text="üì∏ –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ", callback_data=f"update_state_{plant_id}")],
            [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π", callback_data=f"view_state_history_{plant_id}")],
            [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"ask_about_plant_{plant_id}")],
            [InlineKeyboardButton(text="üíß –ü–æ–ª–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"water_plant_{plant_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"rename_plant_{plant_id}")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_plant_{plant_id}")],
            [InlineKeyboardButton(text="üåø –ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="my_plants")],
        ]
        
        await callback.message.answer(
            f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º</b>\n\n"
            f"üå± <b>{plant_name}</b>\n"
            f"{state_emoji} <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {state_name}\n"
            f"{water_status}\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {watering_interval} –¥–Ω–µ–π\n"
            f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–π: {state_changes}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_growing_"))
async def edit_growing_callback(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Ä–∞—â–∏–≤–∞–µ–º–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        growing_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        growing_plant = await db.get_growing_plant_by_id(growing_id, user_id)
        
        if not growing_plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        plant_name = growing_plant['plant_name']
        current_stage = growing_plant['current_stage']
        total_stages = growing_plant['total_stages']
        status = growing_plant['status']
        started_date = growing_plant['started_date']
        
        days_growing = (get_moscow_now().date() - started_date.date()).days
        
        stage_name = growing_plant.get('current_stage_name', f'–≠—Ç–∞–ø {current_stage + 1}')
        
        keyboard = [
            [InlineKeyboardButton(text="üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data=f"add_diary_photo_{growing_id}")],
            [InlineKeyboardButton(text="üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫", callback_data=f"view_diary_{growing_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"rename_growing_{growing_id}")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_growing_{growing_id}")],
            [InlineKeyboardButton(text="üåø –ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="my_plants")],
        ]
        
        await callback.message.answer(
            f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ–º</b>\n\n"
            f"üå± <b>{plant_name}</b>\n"
            f"üìÖ –î–µ–Ω—å {days_growing} –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è\n"
            f"üìä –≠—Ç–∞–ø: {current_stage}/{total_stages}\n"
            f"üè∑Ô∏è {stage_name}\n"
            f"‚ö° –°—Ç–∞—Ç—É—Å: {status}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_growing_"))
async def delete_growing_callback(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã—Ä–∞—â–∏–≤–∞–µ–º–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        growing_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        growing_plant = await db.get_growing_plant_by_id(growing_id, user_id)
        
        if not growing_plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        plant_name = growing_plant['plant_name']
        
        keyboard = [
            [InlineKeyboardButton(text="‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_growing_{growing_id}")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_growing_{growing_id}")],
        ]
        
        await callback.message.answer(
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è</b>\n\n"
            f"üå± {plant_name}\n\n"
            f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å\n\n"
            f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_delete_growing_"))
async def confirm_delete_growing_callback(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã—Ä–∞—â–∏–≤–∞–µ–º–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        growing_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        growing_plant = await db.get_growing_plant_by_id(growing_id, user_id)
        
        if growing_plant:
            plant_name = growing_plant['plant_name']
            
            async with db.pool.acquire() as conn:
                await conn.execute("""
                    DELETE FROM growing_plants
                    WHERE id = $1 AND user_id = $2
                """, growing_id, user_id)
            
            await callback.message.answer(
                f"üóëÔ∏è <b>–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ</b>\n\n"
                f"‚ùå {plant_name} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
                parse_mode="HTML",
                reply_markup=simple_back_menu()
            )
        else:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("water_plant_"))
async def water_single_plant_callback(callback: types.CallbackQuery):
    """–ü–æ–ª–∏–≤ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_by_id(plant_id, user_id)
        
        if not plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await db.update_watering(user_id, plant_id)
        
        interval = plant.get('watering_interval', 5)
        await create_plant_reminder(plant_id, user_id, interval)
        
        current_time = get_moscow_now().strftime("%d.%m.%Y –≤ %H:%M")
        plant_name = plant['display_name']
        
        await callback.message.answer(
            f"üíß <b>–ü–æ–ª–∏–≤ –æ—Ç–º–µ—á–µ–Ω!</b>\n\n"
            f"üå± <b>{plant_name}</b> –ø–æ–ª–∏—Ç–æ {current_time}\n"
            f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {interval} –¥–Ω–µ–π",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–∏–≤–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data == "water_plants")
async def water_plants_callback(callback: types.CallbackQuery):
    """–ü–æ–ª–∏–≤ –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    
    try:
        db = await get_db()
        await db.update_watering(user_id)
        
        await callback.message.answer(
            "üíß <b>–ü–æ–ª–∏–≤ –æ—Ç–º–µ—á–µ–Ω!</b>\n\n–í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ–ª–∏—Ç—ã",
            parse_mode="HTML",
            reply_markup=simple_back_menu()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–∏–≤–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("update_state_"))
async def update_state_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        await state.update_data(
            updating_plant_state=True,
            state_plant_id=plant_id
        )
        
        await callback.message.answer(
            "üì∏ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è</b>\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è:\n"
            "‚Ä¢ –°—Ä–∞–≤–Ω—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º\n"
            "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—é –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –î–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å–µ–π—á–∞—Å:",
            parse_mode="HTML"
        )
        
        await state.set_state(PlantStates.waiting_state_update_photo)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("view_state_history_"))
async def view_state_history_callback(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_with_state(plant_id, user_id)
        history = await db.get_plant_state_history(plant_id, limit=10)
        
        if not plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        plant_name = plant['display_name']
        current_state = plant.get('current_state', 'healthy')
        state_emoji = STATE_EMOJI.get(current_state, 'üå±')
        state_name = STATE_NAMES.get(current_state, '–ó–¥–æ—Ä–æ–≤–æ–µ')
        
        text = f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π: {plant_name}</b>\n\n"
        text += f"{state_emoji} <b>–¢–µ–∫—É—â–µ–µ:</b> {state_name}\n"
        text += f"üìÖ <b>–ò–∑–º–µ–Ω–µ–Ω–æ:</b> {plant['state_changed_date'].strftime('%d.%m.%Y')}\n"
        text += f"üîÑ <b>–í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b> {plant.get('state_changes_count', 0)}\n\n"
        
        if history:
            text += f"üìñ <b>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b>\n\n"
            for entry in history[:5]:
                entry_date = entry['change_date'].strftime('%d.%m %H:%M')
                prev_emoji = STATE_EMOJI.get(entry['previous_state'], 'üå±') if entry['previous_state'] else ''
                new_emoji = STATE_EMOJI.get(entry['new_state'], 'üå±')
                
                text += f"üìÖ <b>{entry_date}</b>\n"
                if entry['previous_state']:
                    text += f"   {prev_emoji} ‚Üí {new_emoji}\n"
                else:
                    text += f"   {new_emoji} –î–æ–±–∞–≤–ª–µ–Ω–æ\n"
                
                if entry['change_reason']:
                    reason = entry['change_reason'][:50] + "..." if len(entry['change_reason']) > 50 else entry['change_reason']
                    text += f"   üí¨ {reason}\n"
                
                text += "\n"
        else:
            text += "üìù –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞\n\n"
        
        keyboard = [
            [InlineKeyboardButton(text="üì∏ –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ", callback_data=f"update_state_{plant_id}")],
            [InlineKeyboardButton(text="üåø –ö —Ä–∞—Å—Ç–µ–Ω–∏—é", callback_data=f"edit_plant_{plant_id}")],
        ]
        
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("rename_plant_"))
async def rename_plant_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_by_id(plant_id, user_id)
        
        if not plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        current_name = plant['display_name']
        
        await state.update_data(editing_plant_id=plant_id)
        await state.set_state(PlantStates.editing_plant_name)
        
        await callback.message.answer(
            f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è</b>\n\n"
            f"üå± –¢–µ–∫—É—â–µ–µ: {current_name}\n\n"
            f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()

@dp.message(StateFilter(PlantStates.editing_plant_name))
async def handle_plant_rename(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    try:
        new_name = message.text.strip()
        
        if len(new_name) < 2:
            await message.reply("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
            return
        
        data = await state.get_data()
        plant_id = data.get('editing_plant_id')
        
        if not plant_id:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            await state.clear()
            return
        
        user_id = message.from_user.id
        
        db = await get_db()
        await db.update_plant_name(plant_id, user_id, new_name)
        
        await message.reply(
            f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
            f"üå± –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{new_name}</b>",
            parse_mode="HTML",
            reply_markup=main_menu()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        await state.clear()

@dp.callback_query(F.data.startswith("delete_plant_"))
async def delete_plant_callback(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_by_id(plant_id, user_id)
        
        if not plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        plant_name = plant['display_name']
        
        keyboard = [
            [InlineKeyboardButton(text="‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{plant_id}")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_plant_{plant_id}")],
        ]
        
        await callback.message.answer(
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è</b>\n\n"
            f"üå± {plant_name}\n\n"
            f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å\n\n"
            f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_callback(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_by_id(plant_id, user_id)
        
        if plant:
            plant_name = plant['display_name']
            await db.delete_plant(user_id, plant_id)
            
            await callback.message.answer(
                f"üóëÔ∏è <b>–†–∞—Å—Ç–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ</b>\n\n"
                f"‚ùå {plant_name} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
                parse_mode="HTML",
                reply_markup=simple_back_menu()
            )
        else:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data == "stats")
async def stats_callback(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    user_id = callback.from_user.id
    
    try:
        db = await get_db()
        stats = await db.get_user_stats(user_id)
        
        stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        stats_text += f"üå± –†–∞—Å—Ç–µ–Ω–∏–π: {stats['total_plants']}\n"
        stats_text += f"üíß –ü–æ–ª–∏–≤–æ–≤: {stats['total_waterings']}\n"
        
        if stats['total_growing'] > 0:
            stats_text += f"\nüåø <b>–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ:</b>\n"
            stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_growing']}\n"
            stats_text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['completed_growing']}\n"
        
        await callback.message.answer(
            stats_text,
            parse_mode="HTML",
            reply_markup=main_menu()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞", reply_markup=main_menu())
    
    await callback.answer()

@dp.callback_query(F.data == "add_plant")
async def add_plant_callback(callback: types.CallbackQuery):
    await callback.message.answer("üì∏ <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è</b>", parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == "analyze")
async def analyze_callback(callback: types.CallbackQuery):
    await callback.message.answer("üì∏ <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</b>", parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == "reanalyze")
async def reanalyze_callback(callback: types.CallbackQuery):
    await callback.message.answer("üì∏ <b>–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ</b>", parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == "question")
async def question_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùì <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å</b>", parse_mode="HTML")
    await state.set_state(PlantStates.waiting_question)
    await callback.answer()

@dp.callback_query(F.data == "ask_about")
async def ask_about_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùì <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏</b>", parse_mode="HTML")
    await state.set_state(PlantStates.waiting_question)
    await callback.answer()

@dp.callback_query(F.data == "help")
async def help_callback(callback: types.CallbackQuery):
    """–°–ø—Ä–∞–≤–∫–∞"""
    await help_command(callback.message)
    await callback.answer()

@dp.callback_query(F.data.startswith("snooze_"))
async def snooze_reminder_callback(callback: types.CallbackQuery):
    """–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_by_id(plant_id, user_id)
        
        if plant:
            plant_name = plant['display_name']
            await create_plant_reminder(plant_id, user_id, 1)
            
            await callback.message.answer(
                f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ</b>\n\n"
                f"üå± {plant_name}\n"
                f"üìÖ –ó–∞–≤—Ç—Ä–∞ –Ω–∞–ø–æ–º–Ω—é –ø–æ–ª–∏—Ç—å",
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")
    
    await callback.answer()

@dp.callback_query(F.data == "disable_monthly_reminders")
async def disable_monthly_reminders_callback(callback: types.CallbackQuery):
    """–û—Ç–∫–ª—é—á–∏—Ç—å –º–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        user_id = callback.from_user.id
        db = await get_db()
        
        async with db.pool.acquire() as conn:
            await conn.execute("""
                UPDATE user_settings
                SET monthly_photo_reminder = FALSE
                WHERE user_id = $1
            """, user_id)
        
        await callback.message.answer(
            "üîï <b>–ú–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    await callback.answer()

@dp.callback_query(F.data == "snooze_monthly_reminder")
async def snooze_monthly_reminder_callback(callback: types.CallbackQuery):
    """–û—Ç–ª–æ–∂–∏—Ç—å –º–µ—Å—è—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    try:
        user_id = callback.from_user.id
        db = await get_db()
        
        week_ago = datetime.now() - timedelta(days=23)
        
        async with db.pool.acquire() as conn:
            await conn.execute("""
                UPDATE user_settings
                SET last_monthly_reminder = $1
                WHERE user_id = $2
            """, week_ago, user_id)
        
        await callback.message.answer(
            "‚è∞ <b>–ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é!</b>\n\n"
            "–¢–æ–≥–¥–∞ –µ—â–µ —Ä–∞–∑ –ø—Ä–µ–¥–ª–æ–∂—É –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–π.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    await callback.answer()

@dp.callback_query(F.data == "toggle_reminders")
async def toggle_reminders_callback(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        user_id = callback.from_user.id
        db = await get_db()
        
        async with db.pool.acquire() as conn:
            current = await conn.fetchrow("""
                SELECT reminder_enabled FROM user_settings WHERE user_id = $1
            """, user_id)
            
            if current:
                new_status = not current['reminder_enabled']
            else:
                new_status = False
            
            await conn.execute("""
                UPDATE user_settings
                SET reminder_enabled = $1
                WHERE user_id = $2
            """, new_status, user_id)
        
        status_text = "‚úÖ –≤–∫–ª—é—á–µ–Ω—ã" if new_status else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω—ã"
        
        await callback.message.answer(
            f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {status_text}</b>\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notifications –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")
    
    await callback.answer()

# === –û–ù–ë–û–†–î–ò–ù–ì CALLBACKS ===

@dp.callback_query(F.data == "onboarding_demo")
async def onboarding_demo_callback(callback: types.CallbackQuery):
    """–î–µ–º–æ –∞–Ω–∞–ª–∏–∑–∞"""
    demo_text = (
        "üîç <b>–°–º–æ—Ç—Ä–∏—Ç–µ! –í–æ—Ç –∫–∞–∫ —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞—Å—Ç–µ–Ω–∏—è:</b>\n\n"
        "üåø <b>–§–∏–∫—É—Å –ë–µ–Ω–¥–∂–∞–º–∏–Ω–∞</b> (Ficus benjamina)\n"
        "üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> 95%\n"
        "üå± <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> –ó–¥–æ—Ä–æ–≤–æ–µ\n\n"
        "üîç <b>–ß—Ç–æ –≤–∏–¥–Ω–æ:</b>\n"
        "‚úÖ –õ–∏—Å—Ç—å—è: –∑–¥–æ—Ä–æ–≤—ã–µ, –∑–µ–ª–µ–Ω—ã–µ\n"
        "‚ùå –ü–æ—á–≤–∞: –Ω–µ –≤–∏–¥–Ω–∞ –≤ –∫–∞–¥—Ä–µ\n\n"
        "üí° <b>–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –¶–≤–µ—Ç–µ–Ω–∏–µ ‚Üí –º–µ–Ω—è—é —Ä–µ–∂–∏–º –ø–æ–ª–∏–≤–∞\n"
        "‚Ä¢ –°—Ç—Ä–µ—Å—Å ‚Üí –¥–∞—é —Å—Ä–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç ‚Üí —É–≤–µ–ª–∏—á–∏–≤–∞—é –ø–æ–¥–∫–æ—Ä–º–∫—É\n\n"
        "üì∏ <b>–ú–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ!"
    )
    
    keyboard = [
        [InlineKeyboardButton(text="üì∏ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="onboarding_try_analyze")],
        [InlineKeyboardButton(text="üåø –í—ã—Ä–∞—Å—Ç–∏—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ", callback_data="onboarding_try_grow")],
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö", callback_data="onboarding_try_question")],
    ]
    
    await callback.message.answer(
        demo_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@dp.callback_query(F.data == "onboarding_quick_start")
async def onboarding_quick_start_callback(callback: types.CallbackQuery):
    """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç"""
    keyboard = [
        [InlineKeyboardButton(text="üì∏ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="onboarding_try_analyze")],
        [InlineKeyboardButton(text="üåø –í—ã—Ä–∞—Å—Ç–∏—Ç—å —Å –Ω—É–ª—è", callback_data="onboarding_try_grow")],
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="onboarding_try_question")],
        [InlineKeyboardButton(text="üí° –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä", callback_data="onboarding_demo")],
    ]
    
    await callback.message.answer(
        "üéØ <b>–û—Ç–ª–∏—á–Ω–æ! –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?</b>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@dp.callback_query(F.data == "onboarding_try_analyze")
async def onboarding_try_analyze_callback(callback: types.CallbackQuery):
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑"""
    await mark_onboarding_completed(callback.from_user.id)
    
    await callback.message.answer(
        "üì∏ <b>–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è</b>\n\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ –î–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç\n"
        "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –ª–∏—Å—Ç—å—è –∏ –æ–±—â–∏–π –≤–∏–¥\n"
        "‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –ø–æ—á–≤—É –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ\n\n"
        "üì± –ñ–¥—É –≤–∞—à–µ —Ñ–æ—Ç–æ!",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "onboarding_try_grow")
async def onboarding_try_grow_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ"""
    await mark_onboarding_completed(callback.from_user.id)
    
    await callback.message.answer(
        "üåø <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã—Ä–∞—â–∏–≤–∞–µ–º —Å –Ω—É–ª—è!</b>\n\n"
        "üå± <b>–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã—Ä–∞—Å—Ç–∏—Ç—å:</b>\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä—ã: –ë–∞–∑–∏–ª–∏–∫, –ì–µ—Ä–∞–Ω—å, –¢—é–ª—å–ø–∞–Ω—ã, –§–∏–∫—É—Å\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        parse_mode="HTML"
    )
    
    await state.set_state(PlantStates.choosing_plant_to_grow)
    await callback.answer()

@dp.callback_query(F.data == "onboarding_try_question")
async def onboarding_try_question_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""
    await mark_onboarding_completed(callback.from_user.id)
    
    await callback.message.answer(
        "‚ùì <b>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö</b>\n\n"
        "üí° –ü–æ–º–æ–≥—É —Å:\n"
        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ –ª–∏—Å—Ç—å–µ–≤\n"
        "‚Ä¢ –†–µ–∂–∏–º–æ–º –ø–æ–ª–∏–≤–∞\n"
        "‚Ä¢ –ü–µ—Ä–µ—Å–∞–¥–∫–æ–π\n"
        "‚Ä¢ –ë–æ–ª–µ–∑–Ω—è–º–∏\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
        parse_mode="HTML"
    )
    
    await state.set_state(PlantStates.waiting_question)
    await callback.answer()

async def mark_onboarding_completed(user_id: int):
    """–û—Ç–º–µ—Ç–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º"""
    try:
        db = await get_db()
        async with db.pool.acquire() as conn:
            await conn.execute(
                "UPDATE users SET onboarding_completed = TRUE WHERE user_id = $1",
                user_id
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: {e}")

# === –í–´–†–ê–©–ò–í–ê–ù–ò–ï –†–ê–°–¢–ï–ù–ò–ô ===

@dp.callback_query(F.data == "grow_from_scratch")
async def grow_from_scratch_callback(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Å –Ω—É–ª—è"""
    await state.clear()
    
    await callback.message.answer(
        "üåø <b>–í—ã—Ä–∞—â–∏–≤–∞–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å –Ω—É–ª—è!</b>\n\n"
        "üå± <b>–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã—Ä–∞—Å—Ç–∏—Ç—å:</b>\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b> –ë–∞–∑–∏–ª–∏–∫, –ì–µ—Ä–∞–Ω—å, –¢—é–ª—å–ø–∞–Ω—ã, –§–∏–∫—É—Å, –ü–æ–º–∏–¥–æ—Ä—ã\n\n"
        "‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!",
        parse_mode="HTML"
    )
    
    await state.set_state(PlantStates.choosing_plant_to_grow)
    await callback.answer()

@dp.message(StateFilter(PlantStates.choosing_plant_to_grow))
async def handle_plant_choice_for_growing(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è"""
    try:
        plant_name = message.text.strip()
        
        if len(plant_name) < 2:
            await message.reply("ü§î –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
            return
        
        processing_msg = await message.reply(
            f"üß† <b>–ì–æ—Ç–æ–≤–ª—é –ø–ª–∞–Ω –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è...</b>\n\n"
            f"üå± –†–∞—Å—Ç–µ–Ω–∏–µ: {plant_name}",
            parse_mode="HTML"
        )
        
        growing_plan, task_calendar = await get_growing_plan_from_ai(plant_name)
        
        await processing_msg.delete()
        
        if growing_plan and task_calendar:
            await state.update_data(
                plant_name=plant_name,
                growing_plan=growing_plan,
                task_calendar=task_calendar
            )
            
            keyboard = [
                [InlineKeyboardButton(text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º!", callback_data="confirm_growing_plan")],
                [InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="grow_from_scratch")],
            ]
            
            await message.reply(
                f"üå± <b>–ü–ª–∞–Ω –≥–æ—Ç–æ–≤!</b>\n\n{growing_plan}\n\nüìã –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        else:
            await message.reply(
                f"ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –¥–ª—è '{plant_name}'",
                reply_markup=simple_back_menu()
            )
            await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", reply_markup=simple_back_menu())
        await state.clear()

@dp.callback_query(F.data == "confirm_growing_plan")
async def confirm_growing_plan_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è"""
    try:
        data = await state.get_data()
        plant_name = data.get('plant_name')
        growing_plan = data.get('growing_plan')
        task_calendar = data.get('task_calendar')
        
        if not all([plant_name, growing_plan, task_calendar]):
            await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            await callback.answer()
            return
        
        user_id = callback.from_user.id
        db = await get_db()
        
        growing_id = await db.create_growing_plant(
            user_id=user_id,
            plant_name=plant_name,
            growth_method="from_seed",
            growing_plan=growing_plan,
            task_calendar=task_calendar
        )
        
        first_task_date = datetime.now() + timedelta(days=1)
        await db.create_growing_reminder(
            growing_id=growing_id,
            user_id=user_id,
            reminder_type="task",
            next_date=first_task_date,
            stage_number=1,
            task_day=1
        )
        
        await callback.message.answer(
            f"‚úÖ <b>–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!</b>\n\n"
            f"üå± <b>{plant_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é\n\n"
            f"üìÖ –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞\n"
            f"üì∏ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!",
            parse_mode="HTML",
            reply_markup=main_menu()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
        await state.clear()
    
    await callback.answer()

# === –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ ===

@dp.callback_query(F.data == "feedback")
async def feedback_callback(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    keyboard = [
        [InlineKeyboardButton(text="üêõ –°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ", callback_data="feedback_bug")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="feedback_analysis_error")],
        [InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="feedback_suggestion")],
        [InlineKeyboardButton(text="‚≠ê –û–±—â–∏–π –æ—Ç–∑—ã–≤", callback_data="feedback_review")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
    ]
    
    await callback.message.answer(
        "üìù <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("feedback_"))
async def feedback_type_callback(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    feedback_type = callback.data.replace("feedback_", "")
    
    type_messages = {
        "bug": "üêõ <b>–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ</b>\n\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:",
        "analysis_error": "‚ùå <b>–ù–µ—Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑</b>\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏:",
        "suggestion": "üí° <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–¥–µ–µ–π:",
        "review": "‚≠ê <b>–û–±—â–∏–π –æ—Ç–∑—ã–≤</b>\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏:"
    }
    
    await state.update_data(feedback_type=feedback_type)
    await state.set_state(FeedbackStates.writing_message)
    
    await callback.message.answer(
        type_messages.get(feedback_type, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.message(StateFilter(FeedbackStates.writing_message))
async def handle_feedback_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    try:
        feedback_text = message.text.strip() if message.text else ""
        feedback_photo = None
        if message.photo:
            feedback_photo = message.photo[-1].file_id
        
        if not feedback_text and not feedback_photo:
            await message.reply("üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ")
            return
        
        if feedback_text and len(feedback_text) < 5:
            await message.reply("üìù –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        data = await state.get_data()
        feedback_type = data.get('feedback_type', 'review')
        
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name or f"user_{user_id}"
        
        db = await get_db()
        await db.save_feedback(
            user_id=user_id,
            username=username,
            feedback_type=feedback_type,
            message=feedback_text or "–§–æ—Ç–æ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
            photo_file_id=feedback_photo
        )
        
        await message.answer(
            "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!</b>\n\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞.",
            parse_mode="HTML",
            reply_markup=main_menu()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        await state.clear()

# === –í–û–ü–†–û–°–´ –û –†–ê–°–¢–ï–ù–ò–Ø–• ===

@dp.message(StateFilter(PlantStates.waiting_question))
async def handle_question(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    import re
    
    try:
        logger.info(f"‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å")
        
        data = await state.get_data()
        plant_id = data.get('question_plant_id')
        user_id = message.from_user.id
        
        processing_msg = await message.reply("ü§î <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è...</b>", parse_mode="HTML")
        
        context_text = ""
        if plant_id:
            context_text = await get_plant_context(plant_id, user_id, focus="general")
            logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è {plant_id} ({len(context_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        elif user_id in temp_analyses:
            plant_info = temp_analyses[user_id]
            plant_name = plant_info.get("plant_name", "—Ä–∞—Å—Ç–µ–Ω–∏–µ")
            context_text = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ù–µ–¥–∞–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª {plant_name}"
        
        answer = None
        
        if openai_client:
            try:
                system_prompt = """–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º —Å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é. 

–£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è: –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã, –≤–æ–ø—Ä–æ—Å—ã, 
–ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á—Ç–æ–±—ã –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 
–∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç. –£–ø–æ–º–∏–Ω–∞–π—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï:
- –û—Ç–≤–µ—á–∞–π—Ç–µ –¢–û–õ–¨–ö–û –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Markdown: –∑–∞–ø—Ä–µ—â–µ–Ω—ã **, *, __, _, `, #, [], ()
- –î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û —Å–ª–æ–≤–∞ "–≤–∞–∂–Ω–æ", "–æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ"
- –î–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û —Ü–∏—Ñ—Ä—ã (1., 2., 3.) –∏–ª–∏ –º–∞—Ä–∫–µ—Ä ‚Ä¢ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
- –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –∑–≤–µ–∑–¥–æ—á–∫–∏ (*) –≤–æ–æ–±—â–µ –Ω–∏–≥–¥–µ –≤ —Ç–µ–∫—Å—Ç–µ
- –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (_) –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –ü–∏—à–∏—Ç–µ –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º –ø–∏—Å—å–º–µ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–ü—Ä–∏–º–µ—Ä –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –æ—Ç–≤–µ—Ç–∞:
–î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞:

1. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ—á–≤—É –ø–∞–ª—å—Ü–µ–º - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Å–æ—Ö–Ω—É—Ç—å –Ω–∞ 2-3 —Å–º
2. –ü–æ–ª–∏–≤–∞–π—Ç–µ —É–º–µ—Ä–µ–Ω–Ω–æ —Ä–∞–∑ –≤ 7-10 –¥–Ω–µ–π
3. –ó–∏–º–æ–π –ø–æ–ª–∏–≤–∞–π—Ç–µ —Ä–µ–∂–µ

–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ –æ–ø–∞—Å–Ω–µ–µ –Ω–µ–¥–æ–ª–∏–≤–∞.

–ü—Ä–∏–º–µ—Ä –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ì–û (—Ç–∞–∫ –ù–ï –¥–µ–ª–∞—Ç—å):
**–í–∞–∂–Ω–æ**: –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ—á–≤—É *–ø–∞–ª—å—Ü–µ–º*
- –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ __—É–º–µ—Ä–µ–Ω–Ω—ã–π__ –ø–æ–ª–∏–≤

–ë—É–¥—å—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º."""

                user_prompt = f"""–ò–°–¢–û–†–ò–Ø –†–ê–°–¢–ï–ù–ò–Ø:
{context_text}

–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{message.text}

–î–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è."""
                
                response = await openai_client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    max_tokens=1000,
                    temperature=0.3
                )
                answer = response.choices[0].message.content
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"ü§ñ GPT –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {answer[:200]}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if '**' in answer or '__' in answer or '`' in answer:
                    logger.warning(f"‚ö†Ô∏è GPT –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª Markdown, –æ—á–∏—â–∞–µ–º...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
                if plant_id:
                    await save_interaction(
                        plant_id, user_id, message.text, answer,
                        context_used={"context_length": len(context_text)}
                    )
                
                logger.info(f"‚úÖ OpenAI –æ—Ç–≤–µ—Ç–∏–ª —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
            except Exception as e:
                logger.error(f"OpenAI error: {e}")
        
        await processing_msg.delete()
        
        if answer and len(answer) > 50:
            # –û—á–∏—â–∞–µ–º Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç GPT
            cleaned_answer = clean_markdown_formatting(answer)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏
            if cleaned_answer != answer:
                logger.info(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ: {len(answer)} -> {len(cleaned_answer)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if plant_id and context_text:
                cleaned_answer += "\n\nüí° <i>–û—Ç–≤–µ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è</i>"
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã - –ª–æ–≥–∏—Ä—É–µ–º
            if '**' in cleaned_answer or '__' in cleaned_answer:
                logger.error(f"‚ùå –í–ù–ò–ú–ê–ù–ò–ï: –í –æ—Ç–≤–µ—Ç–µ –æ—Å—Ç–∞–ª–∏—Å—å —Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
                logger.error(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç: {cleaned_answer[:300]}")
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
                cleaned_answer = cleaned_answer.replace('**', '').replace('__', '').replace('`', '')
            
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML parse mode
            try:
                await message.reply(cleaned_answer, parse_mode="HTML")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å HTML: {e}")
                # –ï—Å–ª–∏ HTML –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —É–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ plain text
                plain_answer = re.sub(r'<[^>]+>', '', cleaned_answer)
                await message.reply(plain_answer)
        else:
            await message.reply(
                "ü§î –ù–µ –º–æ–≥—É –¥–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.",
                reply_markup=main_menu()
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", reply_markup=main_menu())
        await state.clear()

@dp.callback_query(F.data.startswith("ask_about_plant_"))
async def ask_about_plant_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        plant = await db.get_plant_with_state(plant_id, user_id)
        
        if not plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await state.update_data(question_plant_id=plant_id)
        await state.set_state(PlantStates.waiting_question)
        
        plant_name = plant['display_name']
        
        await callback.message.answer(
            f"‚ùì <b>–í–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏: {plant_name}</b>\n\n"
            f"üß† –Ø –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è:\n"
            f"‚Ä¢ –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã\n"
            f"‚Ä¢ –í–∞—à–∏ –ø—Ä–æ—à–ª—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º\n"
            f"‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —É—Ö–æ–¥–∞\n\n"
            f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()

# === –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í –°–ê–ú–û–ú –ö–û–ù–¶–ï!) ===

@dp.message()
async def catch_all_messages(message: types.Message):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"üì® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text[:50] if message.text else '–Ω–µ —Ç–µ–∫—Å—Ç'}")
    
    if message.text:
        response_text = (
            "ü§î <b>–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /add - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ\n"
            "‚Ä¢ /plants - –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è\n"
            "‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞"
        )
        await message.reply(
            response_text,
            parse_mode="HTML",
            reply_markup=main_menu()
        )
    else:
        await message.reply(
            "üì∏ <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</b>\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é",
            parse_mode="HTML",
            reply_markup=main_menu()
        )

# === WEBHOOK –ò –ó–ê–ü–£–°–ö ===

async def on_startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
    try:
        await init_database()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        logger.info("üîß –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook...")
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π webhook: {webhook_info.url}")
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
        else:
            logger.info("‚ÑπÔ∏è Webhook –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        scheduler.add_job(
            check_and_send_reminders,
            'cron',
            hour=9,
            minute=0,
            id='reminder_check',
            replace_existing=True
        )
        
        scheduler.add_job(
            check_monthly_photo_reminders,
            'cron',
            hour=10,
            minute=0,
            id='monthly_reminder_check',
            replace_existing=True
        )
        
        scheduler.start()
        logger.info("üîî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        logger.info("‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: 9:00 –ú–°–ö")
        logger.info("üì∏ –ú–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: 10:00 –ú–°–ö")
        
        if WEBHOOK_URL:
            await bot.set_webhook(f"{WEBHOOK_URL}/webhook")
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")
        else:
            logger.info("‚úÖ Polling mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise

async def on_shutdown():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    
    if scheduler.running:
        scheduler.shutdown()
        logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        db = await get_db()
        await db.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")
    except:
        pass
    
    try:
        await bot.session.close()
        logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    except:
        pass

async def webhook_handler(request):
    """Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    try:
        url = str(request.url)
        index = url.rfind('/')
        token = url[index + 1:]
        
        if token == BOT_TOKEN.split(':')[1]:
            update = types.Update.model_validate(await request.json(), strict=False)
            await dp.feed_update(bot, update)
            return web.Response()
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ webhook")
            return web.Response(status=403)
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return web.Response(status=500)

async def health_check(request):
    """Health check endpoint"""
    return web.json_response({
        "status": "healthy", 
        "bot": "Bloom AI", 
        "version": "4.1 - Clean Formatting"
    })

async def main():
    """Main —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Bloom AI...")
        logger.info(f"üîë BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        logger.info(f"üîë OPENAI_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if OPENAI_API_KEY else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        logger.info(f"üåê WEBHOOK_URL: {WEBHOOK_URL if WEBHOOK_URL else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (polling —Ä–µ–∂–∏–º)'}")
        
        await on_startup()
        
        if WEBHOOK_URL:
            app = web.Application()
            app.router.add_post('/webhook', webhook_handler)
            app.router.add_get('/health', health_check)
            app.router.add_get('/', health_check)
            
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, '0.0.0.0', PORT)
            await site.start()
            
            logger.info(f"üöÄ Bloom AI v4.1 –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
            logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ GPT!")
            
            try:
                await asyncio.Future()
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ KeyboardInterrupt")
            finally:
                await runner.cleanup()
                await on_shutdown()
        else:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling")
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            try:
                await dp.start_polling(bot, drop_pending_updates=True)
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ KeyboardInterrupt")
            finally:
                await on_shutdown()
                
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
