import asyncio
import logging
from aiohttp import web
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import (
    BOT_TOKEN, WEBHOOK_URL, PORT, MOSCOW_TZ, 
    validate_config, logger
)

# –ò–º–ø–æ—Ä—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
from database import init_database, get_db

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from services.reminder_service import (
    check_and_send_reminders, 
    check_monthly_photo_reminders
)
from services.admin_stats_service import send_daily_report_to_admins

# –ò–º–ø–æ—Ä—Ç—ã handlers
from handlers import (
    commands, photo, callbacks, plants, 
    questions, feedback, onboarding, growing
)

# –ò–º–ø–æ—Ä—Ç middleware
from middleware import ActivityTrackingMiddleware

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –≤ config
logger.info("üöÄ –ó–∞–ø—É—Å–∫ Bloom AI Bot...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)


async def on_startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validate_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook
        logger.info("üîß –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook...")
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π webhook: {webhook_info.url}")
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
        else:
            logger.info("‚ÑπÔ∏è Webhook –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
        register_middleware()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handlers
        register_handlers()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        setup_scheduler()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –∏–ª–∏ polling
        if WEBHOOK_URL:
            await bot.set_webhook(f"{WEBHOOK_URL}/webhook")
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")
        else:
            logger.info("‚úÖ Polling mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise


async def on_shutdown():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    
    if scheduler.running:
        scheduler.shutdown()
        logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        db = await get_db()
        await db.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")
    except:
        pass
    
    try:
        await bot.session.close()
        logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    except:
        pass


def register_middleware():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    dp.message.middleware(ActivityTrackingMiddleware())
    dp.callback_query.middleware(ActivityTrackingMiddleware())
    
    logger.info("‚úÖ Middleware –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã (Activity Tracking)")


def register_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö handlers"""
    dp.include_router(commands.router)
    dp.include_router(photo.router)
    dp.include_router(plants.router)
    dp.include_router(questions.router)
    dp.include_router(feedback.router)
    dp.include_router(growing.router)
    dp.include_router(callbacks.router)
    
    logger.info("‚úÖ Handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


def setup_scheduler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ –≤ 9:00 –ú–°–ö
    scheduler.add_job(
        lambda: check_and_send_reminders(bot),
        'cron',
        hour=9,
        minute=0,
        id='reminder_check',
        replace_existing=True
    )
    
    # –ú–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –≤ 10:00 –ú–°–ö
    scheduler.add_job(
        lambda: check_monthly_photo_reminders(bot),
        'cron',
        hour=10,
        minute=0,
        id='monthly_reminder_check',
        replace_existing=True
    )
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ 9:00 –ú–°–ö
    scheduler.add_job(
        lambda: send_daily_report_to_admins(bot),
        'cron',
        hour=9,
        minute=0,
        id='daily_stats_report',
        replace_existing=True
    )
    
    scheduler.start()
    logger.info("üîî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    logger.info("‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: 9:00 –ú–°–ö")
    logger.info("üì∏ –ú–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: 10:00 –ú–°–ö")
    logger.info("üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: 9:00 –ú–°–ö")


async def webhook_handler(request):
    """Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    try:
        url = str(request.url)
        index = url.rfind('/')
        token = url[index + 1:]
        
        if token == BOT_TOKEN.split(':')[1]:
            update = types.Update.model_validate(await request.json(), strict=False)
            await dp.feed_update(bot, update)
            return web.Response()
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ webhook")
            return web.Response(status=403)
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return web.Response(status=500)


async def health_check(request):
    """Health check endpoint"""
    return web.json_response({
        "status": "healthy", 
        "bot": "Bloom AI", 
        "version": "5.1 - Stats System"
    })


async def main():
    """Main —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Bloom AI v5.1 (Stats System)...")
        
        await on_startup()
        
        if WEBHOOK_URL:
            # Webhook mode
            app = web.Application()
            app.router.add_post('/webhook', webhook_handler)
            app.router.add_get('/health', health_check)
            app.router.add_get('/', health_check)
            
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, '0.0.0.0', PORT)
            await site.start()
            
            logger.info(f"üöÄ Bloom AI v5.1 –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
            logger.info(f"‚úÖ Stats System –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
            
            try:
                await asyncio.Future()
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ KeyboardInterrupt")
            finally:
                await runner.cleanup()
                await on_shutdown()
        else:
            # Polling mode
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling")
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            try:
                await dp.start_polling(bot, drop_pending_updates=True)
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ KeyboardInterrupt")
            finally:
                await on_shutdown()
                
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
