import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from states.user_states import PlantStates
from services.ai_service import answer_plant_question
from plant_memory import get_plant_context, save_interaction
from keyboards.main_menu import main_menu

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data.startswith("ask_about_plant_"))
async def ask_about_plant_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        from database import get_db
        db = await get_db()
        plant = await db.get_plant_with_state(plant_id, user_id)
        
        if not plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await state.update_data(question_plant_id=plant_id)
        await state.set_state(PlantStates.waiting_question)
        
        plant_name = plant['display_name']
        
        await callback.message.answer(
            f"‚ùì <b>–í–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏: {plant_name}</b>\n\n"
            f"üß† –Ø –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è:\n"
            f"‚Ä¢ –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã\n"
            f"‚Ä¢ –í–∞—à–∏ –ø—Ä–æ—à–ª—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º\n"
            f"‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —É—Ö–æ–¥–∞\n\n"
            f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


@router.message(StateFilter(PlantStates.waiting_question))
async def handle_question(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        logger.info(f"‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å")
        
        data = await state.get_data()
        plant_id = data.get('question_plant_id')
        user_id = message.from_user.id
        
        processing_msg = await message.reply(
            "ü§î <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è...</b>", 
            parse_mode="HTML"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è
        context_text = ""
        if plant_id:
            context_text = await get_plant_context(plant_id, user_id, focus="general")
            logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è {plant_id} ({len(context_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if not context_text:
            from services.plant_service import temp_analyses
            if user_id in temp_analyses:
                plant_info = temp_analyses[user_id]
                plant_name = plant_info.get("plant_name", "—Ä–∞—Å—Ç–µ–Ω–∏–µ")
                context_text = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ù–µ–¥–∞–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª {plant_name}"
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        answer = await answer_plant_question(message.text, context_text)
        
        await processing_msg.delete()
        
        if answer and len(answer) > 50 and not answer.startswith("‚ùå"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            if plant_id:
                await save_interaction(
                    plant_id, user_id, message.text, answer,
                    context_used={"context_length": len(context_text)}
                )
            
            await message.reply(answer, parse_mode="HTML" if "<" not in answer else None)
        else:
            await message.reply(
                "ü§î –ù–µ –º–æ–≥—É –¥–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.",
                reply_markup=main_menu()
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", reply_markup=main_menu())
        await state.clear()
