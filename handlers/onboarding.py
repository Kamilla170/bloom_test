import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from states.user_states import PlantStates
from database import get_db

logger = logging.getLogger(__name__)

router = Router()


async def start_onboarding(message: types.Message):
    """–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    first_name = message.from_user.first_name or "–¥—Ä—É–≥"
    
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [InlineKeyboardButton(text="‚ú® –ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä", callback_data="onboarding_demo")],
        [InlineKeyboardButton(text="üöÄ –•–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É", callback_data="onboarding_quick_start")],
    ]
    
    await message.answer(
        f"üå± –û—Ç–ª–∏—á–Ω–æ, {first_name}! –ì–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å –≤–∞—à–∏–º —Å–∞–¥–æ–≤—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º!\n\n"
        "–î–∞–≤–∞–π—Ç–µ —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –∞ –ø–æ—Ç–æ–º –≤—ã –ø–æ–ø—Ä–æ–±—É–µ—Ç–µ —Å–∞–º–∏?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data == "onboarding_demo")
async def onboarding_demo_callback(callback: types.CallbackQuery):
    """–î–µ–º–æ –∞–Ω–∞–ª–∏–∑–∞"""
    demo_text = (
        "üîç <b>–°–º–æ—Ç—Ä–∏—Ç–µ! –í–æ—Ç –∫–∞–∫ —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞—Å—Ç–µ–Ω–∏—è:</b>\n\n"
        "üåø <b>–§–∏–∫—É—Å –ë–µ–Ω–¥–∂–∞–º–∏–Ω–∞</b> (Ficus benjamina)\n"
        "üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> 95%\n"
        "üå± <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> –ó–¥–æ—Ä–æ–≤–æ–µ\n\n"
        "üîç <b>–ß—Ç–æ –≤–∏–¥–Ω–æ:</b>\n"
        "‚úÖ –õ–∏—Å—Ç—å—è: –∑–¥–æ—Ä–æ–≤—ã–µ, –∑–µ–ª–µ–Ω—ã–µ\n"
        "‚ùå –ü–æ—á–≤–∞: –Ω–µ –≤–∏–¥–Ω–∞ –≤ –∫–∞–¥—Ä–µ\n\n"
        "üí° <b>–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –¶–≤–µ—Ç–µ–Ω–∏–µ ‚Üí –º–µ–Ω—è—é —Ä–µ–∂–∏–º –ø–æ–ª–∏–≤–∞\n"
        "‚Ä¢ –°—Ç—Ä–µ—Å—Å ‚Üí –¥–∞—é —Å—Ä–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç ‚Üí —É–≤–µ–ª–∏—á–∏–≤–∞—é –ø–æ–¥–∫–æ—Ä–º–∫—É\n\n"
        "üì∏ <b>–ú–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ!"
    )
    
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [InlineKeyboardButton(text="üì∏ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="onboarding_try_analyze")],
        [InlineKeyboardButton(text="üåø –í—ã—Ä–∞—Å—Ç–∏—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ", callback_data="onboarding_try_grow")],
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö", callback_data="onboarding_try_question")],
    ]
    
    await callback.message.answer(
        demo_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@router.callback_query(F.data == "onboarding_quick_start")
async def onboarding_quick_start_callback(callback: types.CallbackQuery):
    """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç"""
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [InlineKeyboardButton(text="üì∏ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="onboarding_try_analyze")],
        [InlineKeyboardButton(text="üåø –í—ã—Ä–∞—Å—Ç–∏—Ç—å —Å –Ω—É–ª—è", callback_data="onboarding_try_grow")],
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="onboarding_try_question")],
        [InlineKeyboardButton(text="üí° –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä", callback_data="onboarding_demo")],
    ]
    
    await callback.message.answer(
        "üéØ <b>–û—Ç–ª–∏—á–Ω–æ! –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?</b>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@router.callback_query(F.data == "onboarding_try_analyze")
async def onboarding_try_analyze_callback(callback: types.CallbackQuery):
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑"""
    await mark_onboarding_completed(callback.from_user.id)
    
    await callback.message.answer(
        "üì∏ <b>–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è</b>\n\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ –î–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç\n"
        "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –ª–∏—Å—Ç—å—è –∏ –æ–±—â–∏–π –≤–∏–¥\n"
        "‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –ø–æ—á–≤—É –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ\n\n"
        "üì± –ñ–¥—É –≤–∞—à–µ —Ñ–æ—Ç–æ!",
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "onboarding_try_grow")
async def onboarding_try_grow_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ"""
    await mark_onboarding_completed(callback.from_user.id)
    
    await callback.message.answer(
        "üåø <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã—Ä–∞—â–∏–≤–∞–µ–º —Å –Ω—É–ª—è!</b>\n\n"
        "üå± <b>–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã—Ä–∞—Å—Ç–∏—Ç—å:</b>\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä—ã: –ë–∞–∑–∏–ª–∏–∫, –ì–µ—Ä–∞–Ω—å, –¢—é–ª—å–ø–∞–Ω—ã, –§–∏–∫—É—Å\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        parse_mode="HTML"
    )
    
    await state.set_state(PlantStates.choosing_plant_to_grow)
    await callback.answer()


@router.callback_query(F.data == "onboarding_try_question")
async def onboarding_try_question_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""
    await mark_onboarding_completed(callback.from_user.id)
    
    await callback.message.answer(
        "‚ùì <b>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö</b>\n\n"
        "üí° –ü–æ–º–æ–≥—É —Å:\n"
        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ –ª–∏—Å—Ç—å–µ–≤\n"
        "‚Ä¢ –†–µ–∂–∏–º–æ–º –ø–æ–ª–∏–≤–∞\n"
        "‚Ä¢ –ü–µ—Ä–µ—Å–∞–¥–∫–æ–π\n"
        "‚Ä¢ –ë–æ–ª–µ–∑–Ω—è–º–∏\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
        parse_mode="HTML"
    )
    
    await state.set_state(PlantStates.waiting_question)
    await callback.answer()


async def mark_onboarding_completed(user_id: int):
    """–û—Ç–º–µ—Ç–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º"""
    try:
        db = await get_db()
        async with db.pool.acquire() as conn:
            await conn.execute(
                "UPDATE users SET onboarding_completed = TRUE WHERE user_id = $1",
                user_id
            )
        logger.info(f"‚úÖ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: {e}")
