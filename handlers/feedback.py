import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from states.user_states import FeedbackStates
from keyboards.main_menu import main_menu
from database import get_db

logger = logging.getLogger(__name__)

router = Router()


async def show_feedback_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [InlineKeyboardButton(text="üêõ –°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ", callback_data="feedback_bug")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="feedback_analysis_error")],
        [InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="feedback_suggestion")],
        [InlineKeyboardButton(text="‚≠ê –û–±—â–∏–π –æ—Ç–∑—ã–≤", callback_data="feedback_review")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
    ]
    
    await callback.message.answer(
        "üìù <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("feedback_"))
async def feedback_type_callback(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    feedback_type = callback.data.replace("feedback_", "")
    
    type_messages = {
        "bug": "üêõ <b>–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ</b>\n\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:",
        "analysis_error": "‚ùå <b>–ù–µ—Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑</b>\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏:",
        "suggestion": "üí° <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–¥–µ–µ–π:",
        "review": "‚≠ê <b>–û–±—â–∏–π –æ—Ç–∑—ã–≤</b>\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏:"
    }
    
    await state.update_data(feedback_type=feedback_type)
    await state.set_state(FeedbackStates.writing_message)
    
    await callback.message.answer(
        type_messages.get(feedback_type, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"),
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(StateFilter(FeedbackStates.writing_message))
async def handle_feedback_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    try:
        feedback_text = message.text.strip() if message.text else ""
        feedback_photo = None
        if message.photo:
            feedback_photo = message.photo[-1].file_id
        
        if not feedback_text and not feedback_photo:
            await message.reply("üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ")
            return
        
        if feedback_text and len(feedback_text) < 5:
            await message.reply("üìù –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        data = await state.get_data()
        feedback_type = data.get('feedback_type', 'review')
        
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name or f"user_{user_id}"
        
        db = await get_db()
        await db.save_feedback(
            user_id=user_id,
            username=username,
            feedback_type=feedback_type,
            message=feedback_text or "–§–æ—Ç–æ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
            photo_file_id=feedback_photo
        )
        
        await message.answer(
            "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!</b>\n\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞.",
            parse_mode="HTML",
            reply_markup=main_menu()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        await state.clear()
