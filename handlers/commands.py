import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from database import get_db
from keyboards.main_menu import main_menu
from utils.time_utils import get_moscow_now

logger = logging.getLogger(__name__)
router = Router()


async def show_returning_user_welcome(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    first_name = message.from_user.first_name or "–¥—Ä—É–≥"
    
    await message.answer(
        f"üå± –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!\n\n"
        "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ —Å–µ–≥–æ–¥–Ω—è?",
        reply_markup=main_menu()
    )


@router.message(Command("start"))
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º"""
    user_id = message.from_user.id
    first_name = message.from_user.first_name or "–¥—Ä—É–≥"
    
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        db = await get_db()
        
        async with db.pool.acquire() as conn:
            existing_user = await conn.fetchrow(
                "SELECT user_id FROM users WHERE user_id = $1", user_id
            )
            
            if not existing_user:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
                await db.add_user(
                    user_id=user_id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name
                )
                
                logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω")
                
                # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await message.answer(
                    f"üå± –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n"
                    "–Ø –ø–æ–º–æ–≥—É —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –≤–∞—à–∏–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏:\n\n"
                    "üì∏ –û–ø—Ä–µ–¥–µ–ª—è—é –≤–∏–¥ –ø–æ —Ñ–æ—Ç–æ –∏ –¥–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                    "üíß –ù–∞–ø–æ–º–∏–Ω–∞—é –æ –ø–æ–ª–∏–≤–µ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è\n"
                    "üß† –ó–∞–ø–æ–º–∏–Ω–∞—é –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
                    "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –º–µ—Å—è—á–Ω—ã–º —Ñ–æ—Ç–æ\n\n"
                    "üéØ –ù–∞—á–Ω–∏—Ç–µ —Å –∫–Ω–æ–ø–∫–∏ \"–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ\" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ!",
                    reply_markup=main_menu()
                )
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
                await show_returning_user_welcome(message)
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ /start: {e}", exc_info=True)
        await message.answer(
            f"üå± –ü—Ä–∏–≤–µ—Ç, {first_name}!",
            reply_markup=main_menu()
        )


@router.message(Command("help"))
async def help_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üåø <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>

üì∏ <b>–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏–π</b>
- –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ - —è –æ–ø—Ä–µ–¥–µ–ª—é –≤–∏–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
- –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

üíß <b>–£—Ö–æ–¥ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏</b>
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (—Ü–≤–µ—Ç–µ–Ω–∏–µ, –ø–æ–∫–æ–π, —Å—Ç—Ä–µ—Å—Å)
- –ú–µ—Å—è—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ

üå± <b>–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Å –Ω—É–ª—è</b>
- –î–Ω–µ–≤–Ω–∏–∫ —Ä–æ—Å—Ç–∞
- –§–æ—Ç–æ–∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è
- –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

‚ùì <b>–í–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö</b>
- –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Å —Ñ–æ—Ç–æ
- –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
- –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ–Ω–∏–π
- –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤
- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üí° <b>–°–æ–≤–µ—Ç:</b> –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è - —è —Å—Ä–∞–∑—É –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é!
"""
    
    await message.answer(help_text, parse_mode="HTML", reply_markup=main_menu())


@router.message(Command("stats"))
async def stats_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    try:
        db = await get_db()
        
        async with db.pool.acquire() as conn:
            # –°—á–∏—Ç–∞–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è
            plants_count = await conn.fetchval(
                "SELECT COUNT(*) FROM plants WHERE user_id = $1",
                user_id
            )
            
            # –°—á–∏—Ç–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã
            analyses_count = await conn.fetchval(
                "SELECT COUNT(*) FROM plant_analyses WHERE user_id = $1",
                user_id
            )
            
            # –°—á–∏—Ç–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
            questions_count = await conn.fetchval(
                "SELECT COUNT(*) FROM plant_qa_history WHERE user_id = $1",
                user_id
            )
            
            # –°—á–∏—Ç–∞–µ–º –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
            growing_count = await conn.fetchval(
                "SELECT COUNT(*) FROM growing_plants WHERE user_id = $1",
                user_id
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            user_info = await conn.fetchrow(
                "SELECT created_at FROM users WHERE user_id = $1",
                user_id
            )
            
            created_at = user_info['created_at']
            days_with_bot = (get_moscow_now().replace(tzinfo=None) - created_at).days
        
        stats_text = f"""
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üåø <b>–†–∞—Å—Ç–µ–Ω–∏—è:</b> {plants_count}
üì∏ <b>–ê–Ω–∞–ª–∏–∑–æ–≤:</b> {analyses_count}
‚ùì <b>–í–æ–ø—Ä–æ—Å–æ–≤:</b> {questions_count}
üå± <b>–í—ã—Ä–∞—â–∏–≤–∞—é:</b> {growing_count}

üìÖ <b>–° –±–æ—Ç–æ–º:</b> {days_with_bot} –¥–Ω–µ–π
üéØ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {analyses_count + questions_count} –¥–µ–π—Å—Ç–≤–∏–π

üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏!
"""
        
        await message.answer(stats_text, parse_mode="HTML", reply_markup=main_menu())
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=main_menu()
        )


@router.message(Command("cancel"))
async def cancel_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã", reply_markup=main_menu())
        return
    
    await state.clear()
    await message.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_menu())
