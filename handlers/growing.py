import logging
from datetime import timedelta
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from states.user_states import PlantStates
from services.ai_service import generate_growing_plan
from keyboards.plant_menu import growing_plant_menu, delete_confirmation
from keyboards.main_menu import simple_back_menu
from database import get_db
from utils.time_utils import get_moscow_now

logger = logging.getLogger(__name__)

router = Router()


@router.message(StateFilter(PlantStates.choosing_plant_to_grow))
async def handle_plant_choice_for_growing(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è"""
    try:
        plant_name = message.text.strip()
        
        if len(plant_name) < 2:
            await message.reply("ü§î –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
            return
        
        processing_msg = await message.reply(
            f"üß† <b>–ì–æ—Ç–æ–≤–ª—é –ø–ª–∞–Ω –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è...</b>\n\n"
            f"üå± –†–∞—Å—Ç–µ–Ω–∏–µ: {plant_name}",
            parse_mode="HTML"
        )
        
        growing_plan, task_calendar = await generate_growing_plan(plant_name)
        
        await processing_msg.delete()
        
        if growing_plan and task_calendar:
            await state.update_data(
                plant_name=plant_name,
                growing_plan=growing_plan,
                task_calendar=task_calendar
            )
            
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
            
            keyboard = [
                [InlineKeyboardButton(text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º!", callback_data="confirm_growing_plan")],
                [InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="grow_from_scratch")],
            ]
            
            await message.reply(
                f"üå± <b>–ü–ª–∞–Ω –≥–æ—Ç–æ–≤!</b>\n\n{growing_plan}\n\nüìã –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        else:
            await message.reply(
                f"ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –¥–ª—è '{plant_name}'",
                reply_markup=simple_back_menu()
            )
            await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", reply_markup=simple_back_menu())
        await state.clear()


@router.callback_query(F.data == "confirm_growing_plan")
async def confirm_growing_plan_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è"""
    try:
        data = await state.get_data()
        plant_name = data.get('plant_name')
        growing_plan = data.get('growing_plan')
        task_calendar = data.get('task_calendar')
        
        if not all([plant_name, growing_plan, task_calendar]):
            await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            await callback.answer()
            return
        
        user_id = callback.from_user.id
        db = await get_db()
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ä–∞—â–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ
        growing_id = await db.create_growing_plant(
            user_id=user_id,
            plant_name=plant_name,
            growth_method="from_seed",
            growing_plan=growing_plan,
            task_calendar=task_calendar
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        first_task_date = get_moscow_now() + timedelta(days=1)
        first_task_date_naive = first_task_date.replace(tzinfo=None)
        
        await db.create_growing_reminder(
            growing_id=growing_id,
            user_id=user_id,
            reminder_type="task",
            next_date=first_task_date_naive,
            stage_number=1,
            task_day=1
        )
        
        from keyboards.main_menu import main_menu
        
        await callback.message.answer(
            f"‚úÖ <b>–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!</b>\n\n"
            f"üå± <b>{plant_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é\n\n"
            f"üìÖ –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞\n"
            f"üì∏ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!",
            parse_mode="HTML",
            reply_markup=main_menu()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
        await state.clear()
    
    await callback.answer()


@router.callback_query(F.data.startswith("edit_growing_"))
async def edit_growing_callback(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Ä–∞—â–∏–≤–∞–µ–º–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        growing_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        growing_plant = await db.get_growing_plant_by_id(growing_id, user_id)
        
        if not growing_plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        plant_name = growing_plant['plant_name']
        current_stage = growing_plant['current_stage']
        total_stages = growing_plant['total_stages']
        status = growing_plant['status']
        started_date = growing_plant['started_date']
        
        days_growing = (get_moscow_now().date() - started_date.date()).days
        
        stage_name = growing_plant.get('current_stage_name', f'–≠—Ç–∞–ø {current_stage + 1}')
        
        await callback.message.answer(
            f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ–º</b>\n\n"
            f"üå± <b>{plant_name}</b>\n"
            f"üìÖ –î–µ–Ω—å {days_growing} –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è\n"
            f"üìä –≠—Ç–∞–ø: {current_stage}/{total_stages}\n"
            f"üè∑Ô∏è {stage_name}\n"
            f"‚ö° –°—Ç–∞—Ç—É—Å: {status}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=growing_plant_menu(growing_id)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data.startswith("delete_growing_"))
async def delete_growing_callback(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã—Ä–∞—â–∏–≤–∞–µ–º–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        growing_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        growing_plant = await db.get_growing_plant_by_id(growing_id, user_id)
        
        if not growing_plant:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        plant_name = growing_plant['plant_name']
        
        await callback.message.answer(
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è</b>\n\n"
            f"üå± {plant_name}\n\n"
            f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å\n\n"
            f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            parse_mode="HTML",
            reply_markup=delete_confirmation(growing_id, is_growing=True)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_growing_"))
async def confirm_delete_growing_callback(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã—Ä–∞—â–∏–≤–∞–µ–º–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        growing_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        db = await get_db()
        growing_plant = await db.get_growing_plant_by_id(growing_id, user_id)
        
        if growing_plant:
            plant_name = growing_plant['plant_name']
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
            async with db.pool.acquire() as conn:
                await conn.execute("""
                    DELETE FROM growing_plants
                    WHERE id = $1 AND user_id = $2
                """, growing_id, user_id)
            
            await callback.message.answer(
                f"üóëÔ∏è <b>–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ</b>\n\n"
                f"‚ùå {plant_name} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
                parse_mode="HTML",
                reply_markup=simple_back_menu()
            )
        else:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()
