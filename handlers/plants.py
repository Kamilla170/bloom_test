import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from states.user_states import PlantStates
from services.plant_service import (
    temp_analyses, save_analyzed_plant, get_user_plants_list, 
    water_plant, water_all_plants, delete_plant, rename_plant,
    get_plant_details, get_plant_state_history
)
from keyboards.main_menu import main_menu, simple_back_menu
from keyboards.plant_menu import plant_control_menu, delete_confirmation
from config import STATE_EMOJI, STATE_NAMES
from database import get_db

logger = logging.getLogger(__name__)

router = Router()


async def show_plants_list(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã)"""
    user_id = message.from_user.id
    
    try:
        plants = await get_user_plants_list(user_id, limit=15)
        
        if not plants:
            await message.answer(
                "üå± <b>–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ:\n"
                "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add",
                parse_mode="HTML",
                reply_markup=main_menu()
            )
            return
        
        await send_plants_list(message, plants, user_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


async def show_plants_collection(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é (–¥–ª—è callback)"""
    user_id = callback.from_user.id
    
    try:
        plants = await get_user_plants_list(user_id, limit=15)
        
        if not plants:
            await callback.message.answer(
                "üå± <b>–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞</b>\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ!",
                parse_mode="HTML",
                reply_markup=main_menu()
            )
            await callback.answer()
            return
        
        await send_plants_list(callback.message, plants, user_id)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
        await callback.answer()


async def send_plants_list(message: types.Message, plants: list, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    text = f"üåø <b>–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è ({len(plants)} —Ä–∞—Å—Ç–µ–Ω–∏–π):</b>\n\n"
    
    keyboard_buttons = []
    
    for i, plant in enumerate(plants, 1):
        plant_name = plant['display_name']
        emoji = plant['emoji']
        
        if plant.get('type') == 'growing':
            stage_info = plant.get('stage_info', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ')
            text += f"{i}. {emoji} <b>{plant_name}</b>\n   {stage_info}\n\n"
            callback_data = f"edit_growing_{plant['growing_id']}"
        else:
            water_status = plant.get('water_status', '')
            text += f"{i}. {emoji} <b>{plant_name}</b>\n   üíß {water_status}\n\n"
            callback_data = f"edit_plant_{plant['id']}"
        
        short_name = plant_name[:15] + "..." if len(plant_name) > 15 else plant_name
        
        from aiogram.types import InlineKeyboardButton
        keyboard_buttons.append([
            InlineKeyboardButton(text=f"‚öôÔ∏è {short_name}", callback_data=callback_data)
        ])
    
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    keyboard_buttons.extend([
        [InlineKeyboardButton(text="üíß –ü–æ–ª–∏—Ç—å –≤—Å–µ", callback_data="water_plants")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
    ])
    
    await message.answer(
        text, 
        parse_mode="HTML", 
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )


@router.callback_query(F.data.startswith("edit_plant_"))
async def edit_plant_callback(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        details = await get_plant_details(plant_id, user_id)
        
        if not details:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        text = f"""
‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º</b>

üå± <b>{details['plant_name']}</b>
{details['state_emoji']} <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {details['state_name']}
üíß {details['water_status']}
‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {details['watering_interval']} –¥–Ω–µ–π
üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–π: {details['state_changes_count']}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=plant_control_menu(plant_id)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data.startswith("water_plant_"))
async def water_single_plant_callback(callback: types.CallbackQuery):
    """–ü–æ–ª–∏–≤ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        result = await water_plant(user_id, plant_id)
        
        if result["success"]:
            await callback.message.answer(
                f"üíß <b>–ü–æ–ª–∏–≤ –æ—Ç–º–µ—á–µ–Ω!</b>\n\n"
                f"üå± <b>{result['plant_name']}</b> –ø–æ–ª–∏—Ç–æ {result['time']}\n"
                f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {result['next_watering_days']} –¥–Ω–µ–π",
                parse_mode="HTML"
            )
        else:
            await callback.answer(f"‚ùå {result['error']}", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–∏–≤–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data == "water_plants")
async def water_plants_callback(callback: types.CallbackQuery):
    """–ü–æ–ª–∏–≤ –≤—Å–µ—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    
    try:
        result = await water_all_plants(user_id)
        
        if result["success"]:
            await callback.message.answer(
                "üíß <b>–ü–æ–ª–∏–≤ –æ—Ç–º–µ—á–µ–Ω!</b>\n\n–í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ–ª–∏—Ç—ã",
                parse_mode="HTML",
                reply_markup=simple_back_menu()
            )
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–∏–≤–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞")
    
    await callback.answer()


@router.callback_query(F.data.startswith("update_state_"))
async def update_state_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        await state.update_data(
            updating_plant_state=True,
            state_plant_id=plant_id
        )
        
        await callback.message.answer(
            "üì∏ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è</b>\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è:\n"
            "‚Ä¢ –°—Ä–∞–≤–Ω—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º\n"
            "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—é –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –î–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å–µ–π—á–∞—Å:",
            parse_mode="HTML"
        )
        
        await state.set_state(PlantStates.waiting_state_update_photo)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data.startswith("view_state_history_"))
async def view_state_history_callback(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        details = await get_plant_details(plant_id, user_id)
        if not details:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        history = await get_plant_state_history(plant_id, limit=10)
        
        text = f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π: {details['plant_name']}</b>\n\n"
        text += f"{details['state_emoji']} <b>–¢–µ–∫—É—â–µ–µ:</b> {details['state_name']}\n"
        text += f"üîÑ <b>–í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b> {details['state_changes_count']}\n\n"
        
        if history:
            text += f"üìñ <b>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b>\n\n"
            for entry in history[:5]:
                date_str = entry['date'].strftime('%d.%m %H:%M')
                
                text += f"üìÖ <b>{date_str}</b>\n"
                if entry['from_state']:
                    text += f"   {entry['emoji_from']} ‚Üí {entry['emoji_to']}\n"
                else:
                    text += f"   {entry['emoji_to']} –î–æ–±–∞–≤–ª–µ–Ω–æ\n"
                
                if entry['reason']:
                    reason = entry['reason'][:50] + "..." if len(entry['reason']) > 50 else entry['reason']
                    text += f"   üí¨ {reason}\n"
                
                text += "\n"
        else:
            text += "üìù –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞\n\n"
        
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = [
            [InlineKeyboardButton(text="üì∏ –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ", callback_data=f"update_state_{plant_id}")],
            [InlineKeyboardButton(text="üåø –ö —Ä–∞—Å—Ç–µ–Ω–∏—é", callback_data=f"edit_plant_{plant_id}")],
        ]
        
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data.startswith("rename_plant_"))
async def rename_plant_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        details = await get_plant_details(plant_id, user_id)
        
        if not details:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        current_name = details['plant_name']
        
        await state.update_data(editing_plant_id=plant_id)
        await state.set_state(PlantStates.editing_plant_name)
        
        await callback.message.answer(
            f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è</b>\n\n"
            f"üå± –¢–µ–∫—É—â–µ–µ: {current_name}\n\n"
            f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


@router.message(StateFilter(PlantStates.editing_plant_name))
async def handle_plant_rename(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    try:
        new_name = message.text.strip()
        
        data = await state.get_data()
        plant_id = data.get('editing_plant_id')
        
        if not plant_id:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            await state.clear()
            return
        
        user_id = message.from_user.id
        
        result = await rename_plant(user_id, plant_id, new_name)
        
        if result["success"]:
            await message.reply(
                f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
                f"üå± –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{result['new_name']}</b>",
                parse_mode="HTML",
                reply_markup=main_menu()
            )
        else:
            await message.reply(f"‚ùå {result['error']}")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        await state.clear()


@router.callback_query(F.data.startswith("delete_plant_"))
async def delete_plant_callback(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        details = await get_plant_details(plant_id, user_id)
        
        if not details:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        plant_name = details['plant_name']
        
        await callback.message.answer(
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è</b>\n\n"
            f"üå± {plant_name}\n\n"
            f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å\n\n"
            f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            parse_mode="HTML",
            reply_markup=delete_confirmation(plant_id, is_growing=False)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_plant_"))
async def confirm_delete_callback(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        result = await delete_plant(user_id, plant_id)
        
        if result["success"]:
            await callback.message.answer(
                f"üóëÔ∏è <b>–†–∞—Å—Ç–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ</b>\n\n"
                f"‚ùå {result['plant_name']} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
                parse_mode="HTML",
                reply_markup=simple_back_menu()
            )
        else:
            await callback.answer("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data.startswith("snooze_"))
async def snooze_reminder_callback(callback: types.CallbackQuery):
    """–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    try:
        plant_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        from services.reminder_service import create_plant_reminder
        
        details = await get_plant_details(plant_id, user_id)
        
        if details:
            plant_name = details['plant_name']
            await create_plant_reminder(plant_id, user_id, 1)
            
            await callback.message.answer(
                f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ</b>\n\n"
                f"üå± {plant_name}\n"
                f"üìÖ –ó–∞–≤—Ç—Ä–∞ –Ω–∞–ø–æ–º–Ω—é –ø–æ–ª–∏—Ç—å",
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")
    
    await callback.answer()


async def save_plant_handler(callback: types.CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    
    if user_id in temp_analyses:
        try:
            analysis_data = temp_analyses[user_id]
            
            result = await save_analyzed_plant(user_id, analysis_data)
            
            if result["success"]:
                del temp_analyses[user_id]
                
                success_text = f"‚úÖ <b>–†–∞—Å—Ç–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                success_text += f"üå± <b>{result['plant_name']}</b> –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n"
                success_text += f"{result['state_emoji']} <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {result['state_name']}\n"
                success_text += f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞: {result['interval']} –¥–Ω–µ–π\n\n"
                success_text += f"üß† <b>–°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n"
                success_text += f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è"
                
                await callback.message.answer(success_text, parse_mode="HTML", reply_markup=main_menu())
            else:
                await callback.message.answer(f"‚ùå {result['error']}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    else:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ")
    
    await callback.answer()
