import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from keyboards.main_menu import main_menu, simple_back_menu
from states.user_states import PlantStates
from database import get_db

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data == "menu")
async def menu_callback(callback: types.CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.answer("üå± <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", parse_mode="HTML", reply_markup=main_menu())
    await callback.answer()


@router.callback_query(F.data == "add_plant")
async def add_plant_callback(callback: types.CallbackQuery):
    """–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ"""
    await callback.message.answer("üì∏ <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è</b>", parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "analyze")
async def analyze_callback(callback: types.CallbackQuery):
    """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    await callback.message.answer("üì∏ <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</b>", parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "reanalyze")
async def reanalyze_callback(callback: types.CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    await callback.message.answer("üì∏ <b>–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ</b>", parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "question")
async def question_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""
    await callback.message.answer("‚ùì <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å</b>", parse_mode="HTML")
    await state.set_state(PlantStates.waiting_question)
    await callback.answer()


@router.callback_query(F.data == "ask_about")
async def ask_about_callback(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–ø—Ä–æ—Å –æ —Ç–µ–∫—É—â–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏"""
    await callback.message.answer("‚ùì <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏</b>", parse_mode="HTML")
    await state.set_state(PlantStates.waiting_question)
    await callback.answer()


@router.callback_query(F.data == "help")
async def help_callback(callback: types.CallbackQuery):
    """–°–ø—Ä–∞–≤–∫–∞"""
    from handlers.commands import help_command
    await help_command(callback.message)
    await callback.answer()


@router.callback_query(F.data == "stats")
async def stats_callback(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    from handlers.commands import stats_command
    await stats_command(callback.message)
    await callback.answer()


@router.callback_query(F.data == "my_plants")
async def my_plants_callback(callback: types.CallbackQuery):
    """–ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è"""
    from handlers.plants import show_plants_collection
    await show_plants_collection(callback)


@router.callback_query(F.data == "grow_from_scratch")
async def grow_from_scratch_callback(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Å –Ω—É–ª—è"""
    await state.clear()
    
    await callback.message.answer(
        "üåø <b>–í—ã—Ä–∞—â–∏–≤–∞–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å –Ω—É–ª—è!</b>\n\n"
        "üå± <b>–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã—Ä–∞—Å—Ç–∏—Ç—å:</b>\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b> –ë–∞–∑–∏–ª–∏–∫, –ì–µ—Ä–∞–Ω—å, –¢—é–ª—å–ø–∞–Ω—ã, –§–∏–∫—É—Å, –ü–æ–º–∏–¥–æ—Ä—ã\n\n"
        "‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!",
        parse_mode="HTML"
    )
    
    await state.set_state(PlantStates.choosing_plant_to_grow)
    await callback.answer()


@router.callback_query(F.data == "save_plant")
async def save_plant_callback(callback: types.CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ"""
    from handlers.plants import save_plant_handler
    await save_plant_handler(callback)


@router.callback_query(F.data == "toggle_reminders")
async def toggle_reminders_callback(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        user_id = callback.from_user.id
        db = await get_db()
        
        async with db.pool.acquire() as conn:
            current = await conn.fetchrow("""
                SELECT reminder_enabled FROM user_settings WHERE user_id = $1
            """, user_id)
            
            if current:
                new_status = not current['reminder_enabled']
            else:
                new_status = False
            
            await conn.execute("""
                UPDATE user_settings
                SET reminder_enabled = $1
                WHERE user_id = $2
            """, new_status, user_id)
        
        status_text = "‚úÖ –≤–∫–ª—é—á–µ–Ω—ã" if new_status else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω—ã"
        
        await callback.message.answer(
            f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {status_text}</b>\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notifications –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")
    
    await callback.answer()


@router.callback_query(F.data == "disable_monthly_reminders")
async def disable_monthly_reminders_callback(callback: types.CallbackQuery):
    """–û—Ç–∫–ª—é—á–∏—Ç—å –º–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        user_id = callback.from_user.id
        db = await get_db()
        
        async with db.pool.acquire() as conn:
            await conn.execute("""
                UPDATE user_settings
                SET monthly_photo_reminder = FALSE
                WHERE user_id = $1
            """, user_id)
        
        await callback.message.answer(
            "üîï <b>–ú–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    await callback.answer()


@router.callback_query(F.data == "snooze_monthly_reminder")
async def snooze_monthly_reminder_callback(callback: types.CallbackQuery):
    """–û—Ç–ª–æ–∂–∏—Ç—å –º–µ—Å—è—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    try:
        from datetime import datetime, timedelta
        
        user_id = callback.from_user.id
        db = await get_db()
        
        week_ago = datetime.now() - timedelta(days=23)
        
        async with db.pool.acquire() as conn:
            await conn.execute("""
                UPDATE user_settings
                SET last_monthly_reminder = $1
                WHERE user_id = $2
            """, week_ago, user_id)
        
        await callback.message.answer(
            "‚è∞ <b>–ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é!</b>\n\n"
            "–¢–æ–≥–¥–∞ –µ—â–µ —Ä–∞–∑ –ø—Ä–µ–¥–ª–æ–∂—É –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–π.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    await callback.answer()


@router.callback_query(F.data == "feedback")
async def feedback_callback(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    from handlers.feedback import show_feedback_menu
    await show_feedback_menu(callback)
